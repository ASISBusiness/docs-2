{
  "nft": {
    "getWalletNFTs": {
      "summary": "Get NFTs by wallet",
      "description": "Get NFTs owned by a given address.\n* The response will include status [SYNCED/SYNCING] based on the contracts being indexed.\n* Use the token_address param to get results for a specific contract only\n* Note that results will include all indexed NFTs\n* Any request that includes the token_address param will start the indexing process for that NFT collection the very first time it is requested.",
      "method": "GET",
      "path": "/:address/nft",
      "pathParams": [
        {
          "name": "address",
          "description": "The address of the wallet",
          "required": true,
          "example": "0xd8da6bf26964af9d7eed9e03e53415d37aa96045",
          "type": "string"
        }
      ],
      "queryParams": [
        {
          "name": "chain",
          "description": "The chain to query",
          "required": false,
          "example": "eth",
          "type": "string",
          "enum": [
            "eth",
            "0x1",
            "goerli",
            "0x5",
            "sepolia",
            "0xaa36a7",
            "polygon",
            "0x89",
            "mumbai",
            "0x13881",
            "bsc",
            "0x38",
            "bsc testnet",
            "0x61",
            "avalanche",
            "0xa86a",
            "avalanche testnet",
            "0xa869",
            "fantom",
            "0xfa",
            "palm",
            "0x2a15c308d",
            "cronos",
            "0x19",
            "cronos testnet",
            "0x152",
            "arbitrum",
            "0xa4b1"
          ]
        },
        {
          "name": "format",
          "description": "The format of the token ID",
          "required": false,
          "example": "decimal",
          "type": "string"
        },
        {
          "name": "limit",
          "description": "The desired page size of the result.",
          "required": false,
          "type": "number"
        },
        {
          "name": "token_addresses",
          "description": "The addresses to get balances for (optional)",
          "required": false,
          "type": "array",
          "field": { "type": "string" }
        },
        {
          "name": "cursor",
          "description": "The cursor returned in the previous response (used for getting the next page).",
          "type": "string"
        },
        {
          "name": "normalizeMetadata",
          "description": "Should normalized metadata be returned?",
          "required": false,
          "type": "boolean"
        }
      ],
      "responses": [
        {
          "status": "200",
          "description": "Returns a collection of NFT owners",
          "body": {
            "type": "object",
            "fields": [
              {
                "name": "status",
                "type": "string",
                "description": "The syncing status of the address [SYNCING/SYNCED]",
                "example": "SYNCING"
              },
              {
                "name": "total",
                "type": "number",
                "description": "The total number of matches for this query",
                "example": "2000"
              },
              {
                "name": "page",
                "type": "number",
                "description": "The current page of the result",
                "example": "2"
              },
              {
                "name": "page_size",
                "type": "number",
                "description": "The number of results per page",
                "example": "100"
              },
              {
                "name": "cursor",
                "type": "string",
                "description": "The cursor to get to the next page"
              },
              {
                "name": "result",
                "type": "object",
                "fields": [
                  {
                    "name": "token_address",
                    "type": "string",
                    "description": "The address of the NFT contract",
                    "example": "0xb47e3cd837dDF8e4c57F05d70Ab865de6e193BBB"
                  },
                  {
                    "name": "token_id",
                    "type": "string",
                    "description": "The token ID of the NFT",
                    "example": "15"
                  },
                  {
                    "name": "contract_type",
                    "type": "string",
                    "description": "The type of NFT contract standard",
                    "example": "ERC721"
                  },
                  {
                    "name": "owner_of",
                    "type": "string",
                    "description": "The wallet address of the owner of the NFT",
                    "example": "0x057Ec652A4F150f7FF94f089A38008f49a0DF88e"
                  },
                  {
                    "name": "block_number",
                    "type": "string",
                    "description": "The block number when the amount or owner changed",
                    "example": "88256"
                  },
                  {
                    "name": "block_number_minted",
                    "type": "string",
                    "description": "The block number when the NFT was minted",
                    "example": "88256"
                  },
                  {
                    "name": "token_uri",
                    "type": "string",
                    "description": "The URI to the metadata of the token"
                  },
                  {
                    "name": "metadata",
                    "type": "string",
                    "description": "The metadata of the token"
                  },
                  {
                    "name": "normalized_metadata",
                    "description": "A normalized metadata version of the NFT's metadata."
                  },
                  {
                    "name": "amount",
                    "type": "string",
                    "description": "The number of this item the user owns (used by ERC1155)",
                    "example": "1"
                  },
                  {
                    "name": "name",
                    "type": "string",
                    "description": "The name of the NFT contract",
                    "example": "CryptoKitties"
                  },
                  {
                    "name": "symbol",
                    "type": "string",
                    "description": "The symbol of the NFT contract",
                    "example": "RARI"
                  },
                  {
                    "name": "token_hash",
                    "type": "string",
                    "description": "The token hash",
                    "example": "502cee781b0fb40ea02508b21d319ced"
                  },
                  {
                    "name": "last_token_uri_sync",
                    "type": "string",
                    "description": "When the token_uri was last updated",
                    "example": "2021-02-24T00:47:26.647Z"
                  },
                  {
                    "name": "last_metadata_sync",
                    "type": "string",
                    "description": "When the metadata was last updated",
                    "example": "2021-02-24T00:47:26.647Z"
                  }
                ]
              }
            ]
          }
        }
      ]
    },
    "getMultipleNFTs": {
      "summary": "Get Multiple NFTs",
      "description": "Returns an array of NFTs specified in the request.\n* Note that results will include all indexed NFTs\n* Any request that includes the token_address param will start the indexing process for that NFT collection the very first time it is requested.\n* Only 25 NFTs can be fetched in one API call.",
      "method": "POST",
      "path": "/nft/getMultipleNFTs",
      "pathParams": [],
      "queryParams": [
        {
          "name": "chain",
          "description": "The chain to query",
          "required": false,
          "example": "eth",
          "type": "string",
          "enum": [
            "eth",
            "0x1",
            "goerli",
            "0x5",
            "sepolia",
            "0xaa36a7",
            "polygon",
            "0x89",
            "mumbai",
            "0x13881",
            "bsc",
            "0x38",
            "bsc testnet",
            "0x61",
            "avalanche",
            "0xa86a",
            "avalanche testnet",
            "0xa869",
            "fantom",
            "0xfa",
            "palm",
            "0x2a15c308d",
            "cronos",
            "0x19",
            "cronos testnet",
            "0x152",
            "arbitrum",
            "0xa4b1"
          ]
        }
      ],
      "responses": [
        { "status": "200", "description": "Returns a collection of NFT owners" }
      ]
    },
    "getWalletNFTTransfers": {
      "summary": "Get transfers by wallet",
      "description": "Get transfers of NFTs given the wallet and other parameters.",
      "method": "GET",
      "path": "/:address/nft/transfers",
      "pathParams": [
        {
          "name": "address",
          "description": "The wallet address of the sender or recipient of the transfers",
          "required": true,
          "example": "0xd8da6bf26964af9d7eed9e03e53415d37aa96045",
          "type": "string"
        }
      ],
      "queryParams": [
        {
          "name": "chain",
          "description": "The chain to query",
          "required": false,
          "example": "eth",
          "type": "string",
          "enum": [
            "eth",
            "0x1",
            "goerli",
            "0x5",
            "sepolia",
            "0xaa36a7",
            "polygon",
            "0x89",
            "mumbai",
            "0x13881",
            "bsc",
            "0x38",
            "bsc testnet",
            "0x61",
            "avalanche",
            "0xa86a",
            "avalanche testnet",
            "0xa869",
            "fantom",
            "0xfa",
            "palm",
            "0x2a15c308d",
            "cronos",
            "0x19",
            "cronos testnet",
            "0x152",
            "arbitrum",
            "0xa4b1"
          ]
        },
        {
          "name": "format",
          "description": "The format of the token ID",
          "required": false,
          "example": "decimal",
          "type": "string"
        },
        {
          "name": "direction",
          "description": "The transfer direction",
          "required": false,
          "example": "both",
          "type": "string"
        },
        {
          "name": "from_block",
          "description": "The minimum block number from which to get the transfers\n* Provide the param 'from_block' or 'from_date'\n* If 'from_date' and 'from_block' are provided, 'from_block' will be used.\n",
          "required": false,
          "type": "number"
        },
        {
          "name": "to_block",
          "description": "To get the reserves at this block number",
          "required": false,
          "type": "string"
        },
        {
          "name": "limit",
          "description": "The desired page size of the result.",
          "required": false,
          "type": "number"
        },
        {
          "name": "cursor",
          "description": "The cursor returned in the previous response (used for getting the next page).",
          "type": "string"
        }
      ],
      "responses": [
        {
          "status": "200",
          "description": "Returns a collection of NFT transfers",
          "body": {
            "type": "object",
            "fields": [
              {
                "name": "total",
                "type": "number",
                "description": "The total number of matches for this query",
                "example": "2000"
              },
              {
                "name": "page",
                "type": "number",
                "description": "The current page of the result",
                "example": "2"
              },
              {
                "name": "page_size",
                "type": "number",
                "description": "The number of results per page",
                "example": "100"
              },
              {
                "name": "cursor",
                "type": "string",
                "description": "The cursor to get to the next page"
              },
              {
                "name": "result",
                "type": "object",
                "fields": [
                  {
                    "name": "token_address",
                    "type": "string",
                    "description": "The address of the NFT contract",
                    "example": "0x057Ec652A4F150f7FF94f089A38008f49a0DF88e"
                  },
                  {
                    "name": "token_id",
                    "type": "string",
                    "description": "The token ID of the NFT",
                    "example": "15"
                  },
                  {
                    "name": "from_address",
                    "type": "string",
                    "description": "The address that sent the NFT",
                    "example": "0x057Ec652A4F150f7FF94f089A38008f49a0DF88e"
                  },
                  {
                    "name": "to_address",
                    "type": "string",
                    "description": "The address that received the NFT",
                    "example": "0x057Ec652A4F150f7FF94f089A38008f49a0DF88e"
                  },
                  {
                    "name": "value",
                    "type": "string",
                    "description": "The value that was sent in the transaction (ETH/BNB/etc..)",
                    "example": "1000000000000000"
                  },
                  {
                    "name": "amount",
                    "type": "string",
                    "description": "The number of tokens transferred",
                    "example": "1"
                  },
                  {
                    "name": "contract_type",
                    "type": "string",
                    "description": "The type of NFT contract standard",
                    "example": "ERC721"
                  },
                  {
                    "name": "block_number",
                    "type": "string",
                    "description": "The block number of the transaction",
                    "example": "88256"
                  },
                  {
                    "name": "block_timestamp",
                    "type": "string",
                    "description": "The block timestamp",
                    "example": "2021-06-04T16:00:15"
                  },
                  {
                    "name": "block_hash",
                    "type": "string",
                    "description": "The block hash of the transaction"
                  },
                  {
                    "name": "transaction_hash",
                    "type": "string",
                    "description": "The transaction hash",
                    "example": "0x057Ec652A4F150f7FF94f089A38008f49a0DF88e"
                  },
                  {
                    "name": "transaction_type",
                    "type": "string",
                    "description": "The transaction type"
                  },
                  {
                    "name": "transaction_index",
                    "type": "number",
                    "description": "The transaction index"
                  },
                  {
                    "name": "log_index",
                    "type": "number",
                    "description": "The log index"
                  },
                  {
                    "name": "operator",
                    "type": "string",
                    "description": "The operator present only for ERC1155 transfers",
                    "example": "0x057Ec652A4F150f7FF94f089A38008f49a0DF88e"
                  }
                ]
              },
              {
                "name": "block_exists",
                "type": "boolean",
                "description": "Indicator if the block exists",
                "example": true
              },
              {
                "name": "index_complete",
                "type": "boolean",
                "description": "Indicator if the block is fully indexed",
                "example": true
              }
            ]
          }
        }
      ]
    },
    "getWalletNFTCollections": {
      "summary": "Get collections by wallet",
      "description": "Get NFT collections owned by a given wallet address.",
      "method": "GET",
      "path": "/:address/nft/collections",
      "pathParams": [
        {
          "name": "address",
          "description": "The wallet address of the owner of NFTs in the collections",
          "required": true,
          "example": "0xd8da6bf26964af9d7eed9e03e53415d37aa96045",
          "type": "string"
        }
      ],
      "queryParams": [
        {
          "name": "chain",
          "description": "The chain to query",
          "required": false,
          "example": "eth",
          "type": "string",
          "enum": [
            "eth",
            "0x1",
            "goerli",
            "0x5",
            "sepolia",
            "0xaa36a7",
            "polygon",
            "0x89",
            "mumbai",
            "0x13881",
            "bsc",
            "0x38",
            "bsc testnet",
            "0x61",
            "avalanche",
            "0xa86a",
            "avalanche testnet",
            "0xa869",
            "fantom",
            "0xfa",
            "palm",
            "0x2a15c308d",
            "cronos",
            "0x19",
            "cronos testnet",
            "0x152",
            "arbitrum",
            "0xa4b1"
          ]
        },
        {
          "name": "limit",
          "description": "The desired page size of the result.",
          "required": false,
          "type": "number"
        },
        {
          "name": "cursor",
          "description": "The cursor returned in the previous response (used for getting the next page).",
          "type": "string"
        }
      ],
      "responses": [
        {
          "status": "200",
          "description": "Returns the NFT collections owned by a wallet",
          "body": {
            "type": "object",
            "fields": [
              {
                "name": "status",
                "type": "string",
                "description": "The syncing status of the address [SYNCING/SYNCED]",
                "example": "SYNCING"
              },
              {
                "name": "total",
                "type": "number",
                "description": "The total number of matches for this query",
                "example": "2000"
              },
              {
                "name": "page",
                "type": "number",
                "description": "The current page of the result",
                "example": "2"
              },
              {
                "name": "page_size",
                "type": "number",
                "description": "The number of results per page",
                "example": "100"
              },
              {
                "name": "cursor",
                "type": "string",
                "description": "The cursor to get to the next page"
              },
              {
                "name": "result",
                "type": "object",
                "fields": [
                  {
                    "name": "token_address",
                    "type": "string",
                    "description": "The address of the NFT contract",
                    "example": "0xb47e3cd837dDF8e4c57F05d70Ab865de6e193BBB"
                  },
                  {
                    "name": "contract_type",
                    "type": "string",
                    "description": "The type of NFT contract standard",
                    "example": "ERC721"
                  },
                  {
                    "name": "name",
                    "type": "string",
                    "description": "The name of the NFT contract",
                    "example": "CryptoKitties"
                  },
                  {
                    "name": "symbol",
                    "type": "string",
                    "description": "The symbol of the NFT contract",
                    "example": "RARI"
                  }
                ]
              }
            ]
          }
        }
      ]
    },
    "getContractNFTs": {
      "summary": "Get NFTs by contract",
      "description": "Get NFTs for a given contract address, including metadata for all NFTs (where available).\n* Results are limited to 100 per page by default\n* Requests for contract addresses not yet indexed will automatically start the indexing process for that NFT collection.",
      "method": "GET",
      "path": "/nft/:address",
      "pathParams": [
        {
          "name": "address",
          "description": "The address of the NFT contract",
          "required": true,
          "example": "0xb47e3cd837dDF8e4c57F05d70Ab865de6e193BBB",
          "type": "string"
        }
      ],
      "queryParams": [
        {
          "name": "chain",
          "description": "The chain to query",
          "required": false,
          "example": "eth",
          "type": "string",
          "enum": [
            "eth",
            "0x1",
            "goerli",
            "0x5",
            "sepolia",
            "0xaa36a7",
            "polygon",
            "0x89",
            "mumbai",
            "0x13881",
            "bsc",
            "0x38",
            "bsc testnet",
            "0x61",
            "avalanche",
            "0xa86a",
            "avalanche testnet",
            "0xa869",
            "fantom",
            "0xfa",
            "palm",
            "0x2a15c308d",
            "cronos",
            "0x19",
            "cronos testnet",
            "0x152",
            "arbitrum",
            "0xa4b1"
          ]
        },
        {
          "name": "format",
          "description": "The format of the token ID",
          "required": false,
          "example": "decimal",
          "type": "string"
        },
        {
          "name": "limit",
          "description": "The desired page size of the result.",
          "required": false,
          "type": "number"
        },
        {
          "name": "totalRanges",
          "description": "The number of subranges to split the results into",
          "required": false,
          "type": "number"
        },
        {
          "name": "range",
          "description": "The desired subrange to query",
          "required": false,
          "type": "number"
        },
        {
          "name": "cursor",
          "description": "The cursor returned in the previous response (used for getting the next page).",
          "type": "string"
        },
        {
          "name": "normalizeMetadata",
          "description": "Should normalized metadata be returned?",
          "required": false,
          "type": "boolean"
        }
      ],
      "responses": [
        {
          "status": "200",
          "description": "Returns a collection of NFTs",
          "body": {
            "type": "object",
            "fields": [
              {
                "name": "total",
                "type": "number",
                "description": "The total number of matches for this query",
                "example": "2000"
              },
              {
                "name": "page",
                "type": "number",
                "description": "The current page of the result",
                "example": "2"
              },
              {
                "name": "page_size",
                "type": "number",
                "description": "The number of results per page",
                "example": "100"
              },
              {
                "name": "cursor",
                "type": "string",
                "description": "The cursor to get to the next page"
              },
              {
                "name": "result",
                "type": "object",
                "fields": [
                  {
                    "name": "token_address",
                    "type": "string",
                    "description": "The address of the NFT contract",
                    "example": "0xb47e3cd837dDF8e4c57F05d70Ab865de6e193BBB"
                  },
                  {
                    "name": "token_id",
                    "type": "string",
                    "description": "The token ID of the NFT",
                    "example": "15"
                  },
                  {
                    "name": "owner_of",
                    "type": "string",
                    "description": "The wallet address of the owner of the NFT",
                    "example": "0x9c83ff0f1c8924da96cb2fcb7e093f78eb2e316b"
                  },
                  {
                    "name": "token_hash",
                    "type": "string",
                    "description": "The token hash",
                    "example": "502cee781b0fb40ea02508b21d319ced"
                  },
                  {
                    "name": "block_number",
                    "type": "string",
                    "description": "The block number when the amount or owner changed",
                    "example": "88256"
                  },
                  {
                    "name": "block_number_minted",
                    "type": "string",
                    "description": "The block number when the NFT was minted",
                    "example": "88256"
                  },
                  {
                    "name": "contract_type",
                    "type": "string",
                    "description": "The type of NFT contract standard",
                    "example": "ERC721"
                  },
                  {
                    "name": "token_uri",
                    "type": "string",
                    "description": "The URI to the metadata of the token"
                  },
                  {
                    "name": "metadata",
                    "type": "string",
                    "description": "The metadata of the token"
                  },
                  {
                    "name": "normalized_metadata",
                    "description": "A normalized metadata version of the NFT's metadata."
                  },
                  {
                    "name": "minter_address",
                    "type": "string",
                    "description": "The address that minted the NFT",
                    "example": "0x9c83ff0f1c8924da96cb2fcb7e093f78eb2e316b"
                  },
                  {
                    "name": "last_token_uri_sync",
                    "type": "string",
                    "description": "When the token_uri was last updated"
                  },
                  {
                    "name": "last_metadata_sync",
                    "type": "string",
                    "description": "When the metadata was last updated"
                  },
                  {
                    "name": "amount",
                    "type": "string",
                    "description": "The quantity of this item that the user owns (used by ERC1155)",
                    "example": "1"
                  },
                  {
                    "name": "name",
                    "type": "string",
                    "description": "The name of the NFT contract",
                    "example": "CryptoKitties"
                  },
                  {
                    "name": "symbol",
                    "type": "string",
                    "description": "The symbol of the NFT contract",
                    "example": "RARI"
                  }
                ]
              }
            ]
          }
        }
      ]
    },
    "getNFTOwners": {
      "summary": "Get owners by contract",
      "description": "Get owners of NFTs for a given contract.\n* Requests for contract addresses not yet indexed will automatically start the indexing process for that NFT collection.",
      "method": "GET",
      "path": "/nft/:address/owners",
      "pathParams": [
        {
          "name": "address",
          "description": "The address of the NFT contract",
          "required": true,
          "example": "0xb47e3cd837dDF8e4c57F05d70Ab865de6e193BBB",
          "type": "string"
        }
      ],
      "queryParams": [
        {
          "name": "chain",
          "description": "The chain to query",
          "required": false,
          "example": "eth",
          "type": "string",
          "enum": [
            "eth",
            "0x1",
            "goerli",
            "0x5",
            "sepolia",
            "0xaa36a7",
            "polygon",
            "0x89",
            "mumbai",
            "0x13881",
            "bsc",
            "0x38",
            "bsc testnet",
            "0x61",
            "avalanche",
            "0xa86a",
            "avalanche testnet",
            "0xa869",
            "fantom",
            "0xfa",
            "palm",
            "0x2a15c308d",
            "cronos",
            "0x19",
            "cronos testnet",
            "0x152",
            "arbitrum",
            "0xa4b1"
          ]
        },
        {
          "name": "format",
          "description": "The format of the token ID",
          "required": false,
          "example": "decimal",
          "type": "string"
        },
        {
          "name": "limit",
          "description": "The desired page size of the result.",
          "required": false,
          "type": "number"
        },
        {
          "name": "cursor",
          "description": "The cursor returned in the previous response (used for getting the next page).",
          "type": "string"
        },
        {
          "name": "normalizeMetadata",
          "description": "Should normalized metadata be returned?",
          "required": false,
          "type": "boolean"
        }
      ],
      "responses": [
        {
          "status": "200",
          "description": "Returns a collection of NFT owners",
          "body": {
            "type": "object",
            "fields": [
              {
                "name": "status",
                "type": "string",
                "description": "The syncing status of the address [SYNCING/SYNCED]",
                "example": "SYNCING"
              },
              {
                "name": "total",
                "type": "number",
                "description": "The total number of matches for this query",
                "example": "2000"
              },
              {
                "name": "page",
                "type": "number",
                "description": "The current page of the result",
                "example": "2"
              },
              {
                "name": "page_size",
                "type": "number",
                "description": "The number of results per page",
                "example": "100"
              },
              {
                "name": "cursor",
                "type": "string",
                "description": "The cursor to get to the next page"
              },
              {
                "name": "result",
                "type": "object",
                "fields": [
                  {
                    "name": "token_address",
                    "type": "string",
                    "description": "The address of the NFT contract",
                    "example": "0xb47e3cd837dDF8e4c57F05d70Ab865de6e193BBB"
                  },
                  {
                    "name": "token_id",
                    "type": "string",
                    "description": "The token ID of the NFT",
                    "example": "15"
                  },
                  {
                    "name": "contract_type",
                    "type": "string",
                    "description": "The type of NFT contract standard",
                    "example": "ERC721"
                  },
                  {
                    "name": "owner_of",
                    "type": "string",
                    "description": "The wallet address of the owner of the NFT",
                    "example": "0x057Ec652A4F150f7FF94f089A38008f49a0DF88e"
                  },
                  {
                    "name": "block_number",
                    "type": "string",
                    "description": "The block number when the amount or owner changed",
                    "example": "88256"
                  },
                  {
                    "name": "block_number_minted",
                    "type": "string",
                    "description": "The block number when the NFT was minted",
                    "example": "88256"
                  },
                  {
                    "name": "token_uri",
                    "type": "string",
                    "description": "The URI to the metadata of the token"
                  },
                  {
                    "name": "metadata",
                    "type": "string",
                    "description": "The metadata of the token"
                  },
                  {
                    "name": "normalized_metadata",
                    "description": "A normalized metadata version of the NFT's metadata."
                  },
                  {
                    "name": "amount",
                    "type": "string",
                    "description": "The number of this item the user owns (used by ERC1155)",
                    "example": "1"
                  },
                  {
                    "name": "name",
                    "type": "string",
                    "description": "The name of the NFT contract",
                    "example": "CryptoKitties"
                  },
                  {
                    "name": "symbol",
                    "type": "string",
                    "description": "The symbol of the NFT contract",
                    "example": "RARI"
                  },
                  {
                    "name": "token_hash",
                    "type": "string",
                    "description": "The token hash",
                    "example": "502cee781b0fb40ea02508b21d319ced"
                  },
                  {
                    "name": "last_token_uri_sync",
                    "type": "string",
                    "description": "When the token_uri was last updated",
                    "example": "2021-02-24T00:47:26.647Z"
                  },
                  {
                    "name": "last_metadata_sync",
                    "type": "string",
                    "description": "When the metadata was last updated",
                    "example": "2021-02-24T00:47:26.647Z"
                  }
                ]
              }
            ]
          }
        }
      ]
    },
    "getNFTContractTransfers": {
      "summary": "Get transfers by contract",
      "description": "Get transfers of NFTs for a given contract and other parameters.",
      "method": "GET",
      "path": "/nft/:address/transfers",
      "pathParams": [
        {
          "name": "address",
          "description": "The address of the NFT contract",
          "required": true,
          "example": "0xb47e3cd837dDF8e4c57F05d70Ab865de6e193BBB",
          "type": "string"
        }
      ],
      "queryParams": [
        {
          "name": "chain",
          "description": "The chain to query",
          "required": false,
          "example": "eth",
          "type": "string",
          "enum": [
            "eth",
            "0x1",
            "goerli",
            "0x5",
            "sepolia",
            "0xaa36a7",
            "polygon",
            "0x89",
            "mumbai",
            "0x13881",
            "bsc",
            "0x38",
            "bsc testnet",
            "0x61",
            "avalanche",
            "0xa86a",
            "avalanche testnet",
            "0xa869",
            "fantom",
            "0xfa",
            "palm",
            "0x2a15c308d",
            "cronos",
            "0x19",
            "cronos testnet",
            "0x152",
            "arbitrum",
            "0xa4b1"
          ]
        },
        {
          "name": "from_block",
          "description": "The minimum block number from where to get the transfers\n* Provide the param 'from_block' or 'from_date'\n* If 'from_date' and 'from_block' are provided, 'from_block' will be used.\n",
          "required": false,
          "type": "number"
        },
        {
          "name": "to_block",
          "description": "The maximum block number from where to get the transfers.\n* Provide the param 'to_block' or 'to_date'\n* If 'to_date' and 'to_block' are provided, 'to_block' will be used.\n",
          "required": false,
          "type": "number"
        },
        {
          "name": "from_date",
          "description": "The date from where to get the transfers (any format that is accepted by momentjs)\n* Provide the param 'from_block' or 'from_date'\n* If 'from_date' and 'from_block' are provided, 'from_block' will be used.\n",
          "required": false,
          "type": "string"
        },
        {
          "name": "to_date",
          "description": "Get transfers up until this date (any format that is accepted by momentjs)\n* Provide the param 'to_block' or 'to_date'\n* If 'to_date' and 'to_block' are provided, 'to_block' will be used.\n",
          "required": false,
          "type": "string"
        },
        {
          "name": "format",
          "description": "The format of the token ID",
          "required": false,
          "example": "decimal",
          "type": "string"
        },
        {
          "name": "limit",
          "description": "The desired page size of the result.",
          "required": false,
          "type": "number"
        },
        {
          "name": "cursor",
          "description": "The cursor returned in the previous response (used for getting the next page).",
          "type": "string"
        }
      ],
      "responses": [
        {
          "status": "200",
          "description": "Returns a collection of NFT transfers",
          "body": {
            "type": "object",
            "fields": [
              {
                "name": "total",
                "type": "number",
                "description": "The total number of matches for this query",
                "example": "2000"
              },
              {
                "name": "page",
                "type": "number",
                "description": "The current page of the result",
                "example": "2"
              },
              {
                "name": "page_size",
                "type": "number",
                "description": "The number of results per page",
                "example": "100"
              },
              {
                "name": "cursor",
                "type": "string",
                "description": "The cursor to get to the next page"
              },
              {
                "name": "result",
                "type": "object",
                "fields": [
                  {
                    "name": "token_address",
                    "type": "string",
                    "description": "The address of the NFT contract",
                    "example": "0x057Ec652A4F150f7FF94f089A38008f49a0DF88e"
                  },
                  {
                    "name": "token_id",
                    "type": "string",
                    "description": "The token ID of the NFT",
                    "example": "15"
                  },
                  {
                    "name": "from_address",
                    "type": "string",
                    "description": "The address that sent the NFT",
                    "example": "0x057Ec652A4F150f7FF94f089A38008f49a0DF88e"
                  },
                  {
                    "name": "to_address",
                    "type": "string",
                    "description": "The address that received the NFT",
                    "example": "0x057Ec652A4F150f7FF94f089A38008f49a0DF88e"
                  },
                  {
                    "name": "value",
                    "type": "string",
                    "description": "The value that was sent in the transaction (ETH/BNB/etc..)",
                    "example": "1000000000000000"
                  },
                  {
                    "name": "amount",
                    "type": "string",
                    "description": "The number of tokens transferred",
                    "example": "1"
                  },
                  {
                    "name": "contract_type",
                    "type": "string",
                    "description": "The type of NFT contract standard",
                    "example": "ERC721"
                  },
                  {
                    "name": "block_number",
                    "type": "string",
                    "description": "The block number of the transaction",
                    "example": "88256"
                  },
                  {
                    "name": "block_timestamp",
                    "type": "string",
                    "description": "The block timestamp",
                    "example": "2021-06-04T16:00:15"
                  },
                  {
                    "name": "block_hash",
                    "type": "string",
                    "description": "The block hash of the transaction"
                  },
                  {
                    "name": "transaction_hash",
                    "type": "string",
                    "description": "The transaction hash",
                    "example": "0x057Ec652A4F150f7FF94f089A38008f49a0DF88e"
                  },
                  {
                    "name": "transaction_type",
                    "type": "string",
                    "description": "The transaction type"
                  },
                  {
                    "name": "transaction_index",
                    "type": "number",
                    "description": "The transaction index"
                  },
                  {
                    "name": "log_index",
                    "type": "number",
                    "description": "The log index"
                  },
                  {
                    "name": "operator",
                    "type": "string",
                    "description": "The operator present only for ERC1155 transfers",
                    "example": "0x057Ec652A4F150f7FF94f089A38008f49a0DF88e"
                  }
                ]
              },
              {
                "name": "block_exists",
                "type": "boolean",
                "description": "Indicator if the block exists",
                "example": true
              },
              {
                "name": "index_complete",
                "type": "boolean",
                "description": "Indicator if the block is fully indexed",
                "example": true
              }
            ]
          }
        }
      ]
    },
    "getNFTTransfersFromToBlock": {
      "summary": "Get transfers from a block to a block",
      "description": "Get transfers of NFTs from a block number to a block number.",
      "method": "GET",
      "path": "/nft/transfers",
      "pathParams": [],
      "queryParams": [
        {
          "name": "chain",
          "description": "The chain to query",
          "required": false,
          "example": "eth",
          "type": "string",
          "enum": [
            "eth",
            "0x1",
            "goerli",
            "0x5",
            "sepolia",
            "0xaa36a7",
            "polygon",
            "0x89",
            "mumbai",
            "0x13881",
            "bsc",
            "0x38",
            "bsc testnet",
            "0x61",
            "avalanche",
            "0xa86a",
            "avalanche testnet",
            "0xa869",
            "fantom",
            "0xfa",
            "palm",
            "0x2a15c308d",
            "cronos",
            "0x19",
            "cronos testnet",
            "0x152",
            "arbitrum",
            "0xa4b1"
          ]
        },
        {
          "name": "from_block",
          "description": "The minimum block number from which to get the transfers\n* Provide the param 'from_block' or 'from_date'\n* If 'from_date' and 'from_block' are provided, 'from_block' will be used.\n",
          "required": false,
          "type": "number"
        },
        {
          "name": "to_block",
          "description": "The maximum block number from which to get the transfers.\n* Provide the param 'to_block' or 'to_date'\n* If 'to_date' and 'to_block' are provided, 'to_block' will be used.\n",
          "required": false,
          "type": "number"
        },
        {
          "name": "from_date",
          "description": "The start date from which to get the transfers (any format that is accepted by momentjs)\n* Provide the param 'from_block' or 'from_date'\n* If 'from_date' and 'from_block' are provided, 'from_block' will be used.\n",
          "required": false,
          "type": "string"
        },
        {
          "name": "to_date",
          "description": "The end date from which to get the transfers (any format that is accepted by momentjs)\n* Provide the param 'to_block' or 'to_date'\n* If 'to_date' and 'to_block' are provided, 'to_block' will be used.\n",
          "required": false,
          "type": "string"
        },
        {
          "name": "format",
          "description": "The format of the token ID",
          "required": false,
          "example": "decimal",
          "type": "string"
        },
        {
          "name": "limit",
          "description": "The desired page size of the result.",
          "required": false,
          "type": "number"
        },
        {
          "name": "cursor",
          "description": "The cursor returned in the previous response (for getting the next page)\n",
          "type": "string"
        }
      ],
      "responses": [
        {
          "status": "200",
          "description": "Returns a collection of NFT transfers",
          "body": {
            "type": "object",
            "fields": [
              {
                "name": "total",
                "type": "number",
                "description": "The total number of matches for this query",
                "example": "2000"
              },
              {
                "name": "page",
                "type": "number",
                "description": "The current page of the result",
                "example": "2"
              },
              {
                "name": "page_size",
                "type": "number",
                "description": "The number of results per page",
                "example": "100"
              },
              {
                "name": "cursor",
                "type": "string",
                "description": "The cursor to get to the next page"
              },
              {
                "name": "result",
                "type": "object",
                "fields": [
                  {
                    "name": "token_address",
                    "type": "string",
                    "description": "The address of the NFT contract",
                    "example": "0x057Ec652A4F150f7FF94f089A38008f49a0DF88e"
                  },
                  {
                    "name": "token_id",
                    "type": "string",
                    "description": "The token ID of the NFT",
                    "example": "15"
                  },
                  {
                    "name": "from_address",
                    "type": "string",
                    "description": "The address that sent the NFT",
                    "example": "0x057Ec652A4F150f7FF94f089A38008f49a0DF88e"
                  },
                  {
                    "name": "to_address",
                    "type": "string",
                    "description": "The address that received the NFT",
                    "example": "0x057Ec652A4F150f7FF94f089A38008f49a0DF88e"
                  },
                  {
                    "name": "value",
                    "type": "string",
                    "description": "The value that was sent in the transaction (ETH/BNB/etc..)",
                    "example": "1000000000000000"
                  },
                  {
                    "name": "amount",
                    "type": "string",
                    "description": "The number of tokens transferred",
                    "example": "1"
                  },
                  {
                    "name": "contract_type",
                    "type": "string",
                    "description": "The type of NFT contract standard",
                    "example": "ERC721"
                  },
                  {
                    "name": "block_number",
                    "type": "string",
                    "description": "The block number of the transaction",
                    "example": "88256"
                  },
                  {
                    "name": "block_timestamp",
                    "type": "string",
                    "description": "The block timestamp",
                    "example": "2021-06-04T16:00:15"
                  },
                  {
                    "name": "block_hash",
                    "type": "string",
                    "description": "The block hash of the transaction"
                  },
                  {
                    "name": "transaction_hash",
                    "type": "string",
                    "description": "The transaction hash",
                    "example": "0x057Ec652A4F150f7FF94f089A38008f49a0DF88e"
                  },
                  {
                    "name": "transaction_type",
                    "type": "string",
                    "description": "The transaction type"
                  },
                  {
                    "name": "transaction_index",
                    "type": "number",
                    "description": "The transaction index"
                  },
                  {
                    "name": "log_index",
                    "type": "number",
                    "description": "The log index"
                  },
                  {
                    "name": "operator",
                    "type": "string",
                    "description": "The operator present only for ERC1155 transfers",
                    "example": "0x057Ec652A4F150f7FF94f089A38008f49a0DF88e"
                  }
                ]
              },
              {
                "name": "block_exists",
                "type": "boolean",
                "description": "Indicator if the block exists",
                "example": true
              },
              {
                "name": "index_complete",
                "type": "boolean",
                "description": "Indicator if the block is fully indexed",
                "example": true
              }
            ]
          }
        }
      ]
    },
    "getNFTTransfersByBlock": {
      "summary": "Get transfers by block",
      "description": "Get transfers of NFTs given a block number or block hash.",
      "method": "GET",
      "path": "/block/:block_number_or_hash/nft/transfers",
      "pathParams": [
        {
          "name": "block_number_or_hash",
          "description": "The block number or block hash",
          "required": true,
          "example": "15846571",
          "type": "string"
        }
      ],
      "queryParams": [
        {
          "name": "chain",
          "description": "The chain to query",
          "required": false,
          "example": "eth",
          "type": "string",
          "enum": [
            "eth",
            "0x1",
            "goerli",
            "0x5",
            "sepolia",
            "0xaa36a7",
            "polygon",
            "0x89",
            "mumbai",
            "0x13881",
            "bsc",
            "0x38",
            "bsc testnet",
            "0x61",
            "avalanche",
            "0xa86a",
            "avalanche testnet",
            "0xa869",
            "fantom",
            "0xfa",
            "palm",
            "0x2a15c308d",
            "cronos",
            "0x19",
            "cronos testnet",
            "0x152",
            "arbitrum",
            "0xa4b1"
          ]
        },
        {
          "name": "limit",
          "description": "The desired page size of the result.",
          "required": false,
          "type": "number"
        },
        {
          "name": "cursor",
          "description": "The cursor returned in the previous response (used for getting the next page).",
          "type": "string"
        }
      ],
      "responses": [
        {
          "status": "200",
          "description": "Returns the contents of a block",
          "body": {
            "type": "object",
            "fields": [
              {
                "name": "total",
                "type": "number",
                "description": "The total number of matches for this query",
                "example": "2000"
              },
              {
                "name": "page",
                "type": "number",
                "description": "The current page of the result",
                "example": "2"
              },
              {
                "name": "page_size",
                "type": "number",
                "description": "The number of results per page",
                "example": "100"
              },
              {
                "name": "cursor",
                "type": "string",
                "description": "The cursor to get to the next page"
              },
              {
                "name": "result",
                "type": "object",
                "fields": [
                  {
                    "name": "token_address",
                    "type": "string",
                    "description": "The address of the NFT contract",
                    "example": "0x057Ec652A4F150f7FF94f089A38008f49a0DF88e"
                  },
                  {
                    "name": "token_id",
                    "type": "string",
                    "description": "The token ID of the NFT",
                    "example": "15"
                  },
                  {
                    "name": "from_address",
                    "type": "string",
                    "description": "The address that sent the NFT",
                    "example": "0x057Ec652A4F150f7FF94f089A38008f49a0DF88e"
                  },
                  {
                    "name": "to_address",
                    "type": "string",
                    "description": "The address that received the NFT",
                    "example": "0x057Ec652A4F150f7FF94f089A38008f49a0DF88e"
                  },
                  {
                    "name": "value",
                    "type": "string",
                    "description": "The value that was sent in the transaction (ETH/BNB/etc..)",
                    "example": "1000000000000000"
                  },
                  {
                    "name": "amount",
                    "type": "string",
                    "description": "The number of tokens transferred",
                    "example": "1"
                  },
                  {
                    "name": "contract_type",
                    "type": "string",
                    "description": "The type of NFT contract standard",
                    "example": "ERC721"
                  },
                  {
                    "name": "block_number",
                    "type": "string",
                    "description": "The block number of the transaction",
                    "example": "88256"
                  },
                  {
                    "name": "block_timestamp",
                    "type": "string",
                    "description": "The block timestamp",
                    "example": "2021-06-04T16:00:15"
                  },
                  {
                    "name": "block_hash",
                    "type": "string",
                    "description": "The block hash of the transaction"
                  },
                  {
                    "name": "transaction_hash",
                    "type": "string",
                    "description": "The transaction hash",
                    "example": "0x057Ec652A4F150f7FF94f089A38008f49a0DF88e"
                  },
                  {
                    "name": "transaction_type",
                    "type": "string",
                    "description": "The transaction type"
                  },
                  {
                    "name": "transaction_index",
                    "type": "number",
                    "description": "The transaction index"
                  },
                  {
                    "name": "log_index",
                    "type": "number",
                    "description": "The log index"
                  },
                  {
                    "name": "operator",
                    "type": "string",
                    "description": "The operator present only for ERC1155 transfers",
                    "example": "0x057Ec652A4F150f7FF94f089A38008f49a0DF88e"
                  }
                ]
              },
              {
                "name": "block_exists",
                "type": "boolean",
                "description": "Indicator if the block exists",
                "example": true
              },
              {
                "name": "index_complete",
                "type": "boolean",
                "description": "Indicator if the block is fully indexed",
                "example": true
              }
            ]
          }
        }
      ]
    },
    "getNFTTrades": {
      "summary": "Get trades by marketplace",
      "description": "Get trades of NFTs for a given contract and marketplace.",
      "method": "GET",
      "path": "/nft/:address/trades",
      "pathParams": [
        {
          "name": "address",
          "description": "The address of the NFT contract",
          "required": true,
          "example": "0xb47e3cd837dDF8e4c57F05d70Ab865de6e193BBB",
          "type": "string"
        }
      ],
      "queryParams": [
        {
          "name": "chain",
          "description": "The chain to query",
          "required": false,
          "example": "eth",
          "type": "string",
          "enum": [
            "eth",
            "0x1",
            "goerli",
            "0x5",
            "sepolia",
            "0xaa36a7",
            "polygon",
            "0x89",
            "mumbai",
            "0x13881",
            "bsc",
            "0x38",
            "bsc testnet",
            "0x61",
            "avalanche",
            "0xa86a",
            "avalanche testnet",
            "0xa869",
            "fantom",
            "0xfa",
            "palm",
            "0x2a15c308d",
            "cronos",
            "0x19",
            "cronos testnet",
            "0x152",
            "arbitrum",
            "0xa4b1"
          ]
        },
        {
          "name": "from_block",
          "description": "The minimum block number from which to get the transfers\n* Provide the param 'from_block' or 'from_date'\n* If 'from_date' and 'from_block' are provided, 'from_block' will be used.\n",
          "required": false,
          "type": "number"
        },
        {
          "name": "to_block",
          "description": "The block number to get the trades from",
          "required": false,
          "type": "string"
        },
        {
          "name": "from_date",
          "description": "The start date from which to get the transfers (any format that is accepted by momentjs)\n* Provide the param 'from_block' or 'from_date'\n* If 'from_date' and 'from_block' are provided, 'from_block' will be used.\n",
          "required": false,
          "type": "string"
        },
        {
          "name": "to_date",
          "description": "The end date from which to get the transfers (any format that is accepted by momentjs)\n* Provide the param 'to_block' or 'to_date'\n* If 'to_date' and 'to_block' are provided, 'to_block' will be used.\n",
          "required": false,
          "type": "string"
        },
        {
          "name": "marketplace",
          "description": "Marketplace from which to get the trades (only OpenSea is supported at the moment)",
          "required": false,
          "example": "opensea",
          "type": "string"
        },
        {
          "name": "cursor",
          "description": "The cursor returned in the previous response (used for getting the next page).",
          "required": false,
          "type": "string"
        },
        {
          "name": "limit",
          "description": "The desired page size of the result.",
          "required": false,
          "type": "number"
        }
      ],
      "responses": [
        {
          "status": "200",
          "description": "Returns the trades",
          "body": {
            "type": "object",
            "fields": [
              {
                "name": "total",
                "type": "number",
                "description": "The total number of matches for this query",
                "example": "2000"
              },
              {
                "name": "page",
                "type": "number",
                "description": "The current page of the result",
                "example": "2"
              },
              {
                "name": "page_size",
                "type": "number",
                "description": "The number of results per page",
                "example": "100"
              },
              {
                "name": "result",
                "type": "object",
                "fields": [
                  {
                    "name": "transaction_hash",
                    "type": "string",
                    "description": "The transaction hash",
                    "example": "0x057Ec652A4F150f7FF94f089A38008f49a0DF88e"
                  },
                  {
                    "name": "transaction_index",
                    "type": "string",
                    "description": "The transaction index"
                  },
                  {
                    "name": "token_ids",
                    "type": "array",
                    "description": "The token ID(s) traded",
                    "example": ["15", "54"],
                    "items": { "type": "string", "example": "15" }
                  },
                  {
                    "name": "seller_address",
                    "type": "string",
                    "description": "The address that sold the NFT",
                    "example": "0x057Ec652A4F150f7FF94f089A38008f49a0DF88e"
                  },
                  {
                    "name": "buyer_address",
                    "type": "string",
                    "description": "The address that bought the NFT",
                    "example": "0x057Ec652A4F150f7FF94f089A38008f49a0DF88e"
                  },
                  {
                    "name": "marketplace_address",
                    "type": "string",
                    "description": "The address of the contract that traded the NFT",
                    "example": "0x057Ec652A4F150f7FF94f089A38008f49a0DF88e"
                  },
                  {
                    "name": "price",
                    "type": "string",
                    "description": "The value that was sent in the transaction (ETH/BNB/etc..)",
                    "example": "1000000000000000"
                  },
                  {
                    "name": "block_timestamp",
                    "type": "string",
                    "description": "The block timestamp",
                    "example": "2021-06-04T16:00:15"
                  },
                  {
                    "name": "block_number",
                    "type": "string",
                    "description": "The block number of the transaction",
                    "example": "13680123"
                  },
                  {
                    "name": "block_hash",
                    "type": "string",
                    "description": "The block hash",
                    "example": "0x4a7c916ca4a970358b9df90051008f729685ff05e9724a9dddba32630c37cb96"
                  }
                ]
              }
            ]
          }
        }
      ]
    },
    "getNFTContractMetadata": {
      "summary": "Get collection metadata",
      "description": "Get the collection / contract level metadata for a given contract (name, symbol, base token URI).\n* Requests for contract addresses not yet indexed will automatically start the indexing process for that NFT collection\n",
      "method": "GET",
      "path": "/nft/:address/metadata",
      "pathParams": [
        {
          "name": "address",
          "description": "The address of the NFT contract",
          "required": true,
          "example": "0xb47e3cd837dDF8e4c57F05d70Ab865de6e193BBB",
          "type": "string"
        }
      ],
      "queryParams": [
        {
          "name": "chain",
          "description": "The chain to query",
          "required": false,
          "example": "eth",
          "type": "string",
          "enum": [
            "eth",
            "0x1",
            "goerli",
            "0x5",
            "sepolia",
            "0xaa36a7",
            "polygon",
            "0x89",
            "mumbai",
            "0x13881",
            "bsc",
            "0x38",
            "bsc testnet",
            "0x61",
            "avalanche",
            "0xa86a",
            "avalanche testnet",
            "0xa869",
            "fantom",
            "0xfa",
            "palm",
            "0x2a15c308d",
            "cronos",
            "0x19",
            "cronos testnet",
            "0x152",
            "arbitrum",
            "0xa4b1"
          ]
        }
      ],
      "responses": [
        {
          "status": "200",
          "description": "Returns the metadata for an NFT collection.",
          "body": {
            "type": "object",
            "fields": [
              {
                "name": "token_address",
                "type": "string",
                "description": "The address of the token contract",
                "example": "0x2d30ca6f024dbc1307ac8a1a44ca27de6f797ec22ef20627a1307243b0ab7d09"
              },
              {
                "name": "name",
                "type": "string",
                "description": "The name of the token contract",
                "example": "KryptoKitties"
              },
              {
                "name": "synced_at",
                "type": "string",
                "description": "Timestamp of when the contract was last synced with the node"
              },
              {
                "name": "symbol",
                "type": "string",
                "description": "The symbol of the NFT contract",
                "example": "RARI"
              },
              {
                "name": "contract_type",
                "type": "string",
                "description": "The type of NFT contract",
                "example": "ERC721"
              }
            ]
          }
        }
      ]
    },
    "getNFTMetadata": {
      "summary": "Get NFT metadata",
      "description": "Get NFT data, including metadata (where available), for the given NFT token ID and contract address.\n* Requests for contract addresses not yet indexed will automatically start the indexing process for that NFT collection\n",
      "method": "GET",
      "path": "/nft/:address/:token_id",
      "pathParams": [
        {
          "name": "address",
          "description": "The address of the NFT contract",
          "required": true,
          "example": "0xb47e3cd837dDF8e4c57F05d70Ab865de6e193BBB",
          "type": "string"
        },
        {
          "name": "token_id",
          "description": "The ID of the token",
          "required": true,
          "example": "1",
          "type": "string"
        }
      ],
      "queryParams": [
        {
          "name": "chain",
          "description": "The chain to query",
          "required": false,
          "example": "eth",
          "type": "string",
          "enum": [
            "eth",
            "0x1",
            "goerli",
            "0x5",
            "sepolia",
            "0xaa36a7",
            "polygon",
            "0x89",
            "mumbai",
            "0x13881",
            "bsc",
            "0x38",
            "bsc testnet",
            "0x61",
            "avalanche",
            "0xa86a",
            "avalanche testnet",
            "0xa869",
            "fantom",
            "0xfa",
            "palm",
            "0x2a15c308d",
            "cronos",
            "0x19",
            "cronos testnet",
            "0x152",
            "arbitrum",
            "0xa4b1"
          ]
        },
        {
          "name": "format",
          "description": "The format of the token ID",
          "required": false,
          "example": "decimal",
          "type": "string"
        },
        {
          "name": "normalizeMetadata",
          "description": "Should normalized metadata be returned?",
          "required": false,
          "type": "boolean"
        }
      ],
      "responses": [
        {
          "status": "200",
          "description": "Returns the specified NFT.",
          "body": {
            "type": "object",
            "fields": [
              {
                "name": "token_address",
                "type": "string",
                "description": "The address of the NFT contract",
                "example": "0xb47e3cd837dDF8e4c57F05d70Ab865de6e193BBB"
              },
              {
                "name": "token_id",
                "type": "string",
                "description": "The token ID of the NFT",
                "example": "15"
              },
              {
                "name": "owner_of",
                "type": "string",
                "description": "The wallet address of the owner of the NFT",
                "example": "0x9c83ff0f1c8924da96cb2fcb7e093f78eb2e316b"
              },
              {
                "name": "token_hash",
                "type": "string",
                "description": "The token hash",
                "example": "502cee781b0fb40ea02508b21d319ced"
              },
              {
                "name": "block_number",
                "type": "string",
                "description": "The block number when the amount or owner changed",
                "example": "88256"
              },
              {
                "name": "block_number_minted",
                "type": "string",
                "description": "The block number when the NFT was minted",
                "example": "88256"
              },
              {
                "name": "contract_type",
                "type": "string",
                "description": "The type of NFT contract standard",
                "example": "ERC721"
              },
              {
                "name": "token_uri",
                "type": "string",
                "description": "The URI to the metadata of the token"
              },
              {
                "name": "metadata",
                "type": "string",
                "description": "The metadata of the token"
              },
              {
                "name": "normalized_metadata",
                "description": "A normalized metadata version of the NFT's metadata."
              },
              {
                "name": "minter_address",
                "type": "string",
                "description": "The address that minted the NFT",
                "example": "0x9c83ff0f1c8924da96cb2fcb7e093f78eb2e316b"
              },
              {
                "name": "last_token_uri_sync",
                "type": "string",
                "description": "When the token_uri was last updated"
              },
              {
                "name": "last_metadata_sync",
                "type": "string",
                "description": "When the metadata was last updated"
              },
              {
                "name": "amount",
                "type": "string",
                "description": "The quantity of this item that the user owns (used by ERC1155)",
                "example": "1"
              },
              {
                "name": "name",
                "type": "string",
                "description": "The name of the NFT contract",
                "example": "CryptoKitties"
              },
              {
                "name": "symbol",
                "type": "string",
                "description": "The symbol of the NFT contract",
                "example": "RARI"
              }
            ]
          }
        }
      ]
    },
    "getNFTTransfers": {
      "summary": "Get transfers by token ID",
      "description": "Get transfers of an NFT given a contract address and token ID.",
      "method": "GET",
      "path": "/nft/:address/:token_id/transfers",
      "pathParams": [
        {
          "name": "address",
          "description": "The address of the NFT contract",
          "required": true,
          "example": "0xb47e3cd837dDF8e4c57F05d70Ab865de6e193BBB",
          "type": "string"
        },
        {
          "name": "token_id",
          "description": "The ID of the token",
          "required": true,
          "example": "1",
          "type": "string"
        }
      ],
      "queryParams": [
        {
          "name": "chain",
          "description": "The chain to query",
          "required": false,
          "example": "eth",
          "type": "string",
          "enum": [
            "eth",
            "0x1",
            "goerli",
            "0x5",
            "sepolia",
            "0xaa36a7",
            "polygon",
            "0x89",
            "mumbai",
            "0x13881",
            "bsc",
            "0x38",
            "bsc testnet",
            "0x61",
            "avalanche",
            "0xa86a",
            "avalanche testnet",
            "0xa869",
            "fantom",
            "0xfa",
            "palm",
            "0x2a15c308d",
            "cronos",
            "0x19",
            "cronos testnet",
            "0x152",
            "arbitrum",
            "0xa4b1"
          ]
        },
        {
          "name": "format",
          "description": "The format of the token ID",
          "required": false,
          "example": "decimal",
          "type": "string"
        },
        {
          "name": "limit",
          "description": "The desired page size of the result.",
          "required": false,
          "type": "number"
        },
        {
          "name": "cursor",
          "description": "The cursor returned in the previous response (used for getting the next page).",
          "type": "string"
        }
      ],
      "responses": [
        {
          "status": "200",
          "description": "Returns a collection of NFT transfers",
          "body": {
            "type": "object",
            "fields": [
              {
                "name": "total",
                "type": "number",
                "description": "The total number of matches for this query",
                "example": "2000"
              },
              {
                "name": "page",
                "type": "number",
                "description": "The current page of the result",
                "example": "2"
              },
              {
                "name": "page_size",
                "type": "number",
                "description": "The number of results per page",
                "example": "100"
              },
              {
                "name": "cursor",
                "type": "string",
                "description": "The cursor to get to the next page"
              },
              {
                "name": "result",
                "type": "object",
                "fields": [
                  {
                    "name": "token_address",
                    "type": "string",
                    "description": "The address of the NFT contract",
                    "example": "0x057Ec652A4F150f7FF94f089A38008f49a0DF88e"
                  },
                  {
                    "name": "token_id",
                    "type": "string",
                    "description": "The token ID of the NFT",
                    "example": "15"
                  },
                  {
                    "name": "from_address",
                    "type": "string",
                    "description": "The address that sent the NFT",
                    "example": "0x057Ec652A4F150f7FF94f089A38008f49a0DF88e"
                  },
                  {
                    "name": "to_address",
                    "type": "string",
                    "description": "The address that received the NFT",
                    "example": "0x057Ec652A4F150f7FF94f089A38008f49a0DF88e"
                  },
                  {
                    "name": "value",
                    "type": "string",
                    "description": "The value that was sent in the transaction (ETH/BNB/etc..)",
                    "example": "1000000000000000"
                  },
                  {
                    "name": "amount",
                    "type": "string",
                    "description": "The number of tokens transferred",
                    "example": "1"
                  },
                  {
                    "name": "contract_type",
                    "type": "string",
                    "description": "The type of NFT contract standard",
                    "example": "ERC721"
                  },
                  {
                    "name": "block_number",
                    "type": "string",
                    "description": "The block number of the transaction",
                    "example": "88256"
                  },
                  {
                    "name": "block_timestamp",
                    "type": "string",
                    "description": "The block timestamp",
                    "example": "2021-06-04T16:00:15"
                  },
                  {
                    "name": "block_hash",
                    "type": "string",
                    "description": "The block hash of the transaction"
                  },
                  {
                    "name": "transaction_hash",
                    "type": "string",
                    "description": "The transaction hash",
                    "example": "0x057Ec652A4F150f7FF94f089A38008f49a0DF88e"
                  },
                  {
                    "name": "transaction_type",
                    "type": "string",
                    "description": "The transaction type"
                  },
                  {
                    "name": "transaction_index",
                    "type": "number",
                    "description": "The transaction index"
                  },
                  {
                    "name": "log_index",
                    "type": "number",
                    "description": "The log index"
                  },
                  {
                    "name": "operator",
                    "type": "string",
                    "description": "The operator present only for ERC1155 transfers",
                    "example": "0x057Ec652A4F150f7FF94f089A38008f49a0DF88e"
                  }
                ]
              },
              {
                "name": "block_exists",
                "type": "boolean",
                "description": "Indicator if the block exists",
                "example": true
              },
              {
                "name": "index_complete",
                "type": "boolean",
                "description": "Indicator if the block is fully indexed",
                "example": true
              }
            ]
          }
        }
      ]
    },
    "getNFTTokenIdOwners": {
      "summary": "Get owners by token ID",
      "description": "Get owners of a specific NFT given the contract address and token ID. \n* Requests for contract addresses not yet indexed will automatically start the indexing process for that NFT collection\n",
      "method": "GET",
      "path": "/nft/:address/:token_id/owners",
      "pathParams": [
        {
          "name": "address",
          "description": "The address of the NFT contract",
          "required": true,
          "example": "0xb47e3cd837dDF8e4c57F05d70Ab865de6e193BBB",
          "type": "string"
        },
        {
          "name": "token_id",
          "description": "The ID of the token",
          "required": true,
          "example": "1",
          "type": "string"
        }
      ],
      "queryParams": [
        {
          "name": "chain",
          "description": "The chain to query",
          "required": false,
          "example": "eth",
          "type": "string",
          "enum": [
            "eth",
            "0x1",
            "goerli",
            "0x5",
            "sepolia",
            "0xaa36a7",
            "polygon",
            "0x89",
            "mumbai",
            "0x13881",
            "bsc",
            "0x38",
            "bsc testnet",
            "0x61",
            "avalanche",
            "0xa86a",
            "avalanche testnet",
            "0xa869",
            "fantom",
            "0xfa",
            "palm",
            "0x2a15c308d",
            "cronos",
            "0x19",
            "cronos testnet",
            "0x152",
            "arbitrum",
            "0xa4b1"
          ]
        },
        {
          "name": "format",
          "description": "The format of the token ID",
          "required": false,
          "example": "decimal",
          "type": "string"
        },
        {
          "name": "limit",
          "description": "The desired page size of the result.",
          "required": false,
          "type": "number"
        },
        {
          "name": "cursor",
          "description": "The cursor returned in the previous response (used for getting the next page).",
          "type": "string"
        },
        {
          "name": "normalizeMetadata",
          "description": "Should normalized metadata be returned?",
          "required": false,
          "type": "boolean"
        }
      ],
      "responses": [
        {
          "status": "200",
          "description": "Returns a collection of NFTs with their respective owners.",
          "body": {
            "type": "object",
            "fields": [
              {
                "name": "status",
                "type": "string",
                "description": "The syncing status of the address [SYNCING/SYNCED]",
                "example": "SYNCING"
              },
              {
                "name": "total",
                "type": "number",
                "description": "The total number of matches for this query",
                "example": "2000"
              },
              {
                "name": "page",
                "type": "number",
                "description": "The current page of the result",
                "example": "2"
              },
              {
                "name": "page_size",
                "type": "number",
                "description": "The number of results per page",
                "example": "100"
              },
              {
                "name": "cursor",
                "type": "string",
                "description": "The cursor to get to the next page"
              },
              {
                "name": "result",
                "type": "object",
                "fields": [
                  {
                    "name": "token_address",
                    "type": "string",
                    "description": "The address of the NFT contract",
                    "example": "0xb47e3cd837dDF8e4c57F05d70Ab865de6e193BBB"
                  },
                  {
                    "name": "token_id",
                    "type": "string",
                    "description": "The token ID of the NFT",
                    "example": "15"
                  },
                  {
                    "name": "contract_type",
                    "type": "string",
                    "description": "The type of NFT contract standard",
                    "example": "ERC721"
                  },
                  {
                    "name": "owner_of",
                    "type": "string",
                    "description": "The wallet address of the owner of the NFT",
                    "example": "0x057Ec652A4F150f7FF94f089A38008f49a0DF88e"
                  },
                  {
                    "name": "block_number",
                    "type": "string",
                    "description": "The block number when the amount or owner changed",
                    "example": "88256"
                  },
                  {
                    "name": "block_number_minted",
                    "type": "string",
                    "description": "The block number when the NFT was minted",
                    "example": "88256"
                  },
                  {
                    "name": "token_uri",
                    "type": "string",
                    "description": "The URI to the metadata of the token"
                  },
                  {
                    "name": "metadata",
                    "type": "string",
                    "description": "The metadata of the token"
                  },
                  {
                    "name": "normalized_metadata",
                    "description": "A normalized metadata version of the NFT's metadata."
                  },
                  {
                    "name": "amount",
                    "type": "string",
                    "description": "The number of this item the user owns (used by ERC1155)",
                    "example": "1"
                  },
                  {
                    "name": "name",
                    "type": "string",
                    "description": "The name of the NFT contract",
                    "example": "CryptoKitties"
                  },
                  {
                    "name": "symbol",
                    "type": "string",
                    "description": "The symbol of the NFT contract",
                    "example": "RARI"
                  },
                  {
                    "name": "token_hash",
                    "type": "string",
                    "description": "The token hash",
                    "example": "502cee781b0fb40ea02508b21d319ced"
                  },
                  {
                    "name": "last_token_uri_sync",
                    "type": "string",
                    "description": "When the token_uri was last updated",
                    "example": "2021-02-24T00:47:26.647Z"
                  },
                  {
                    "name": "last_metadata_sync",
                    "type": "string",
                    "description": "When the metadata was last updated",
                    "example": "2021-02-24T00:47:26.647Z"
                  }
                ]
              }
            ]
          }
        }
      ]
    },
    "syncNFTContract": {
      "summary": "Resync NFT Contract",
      "description": "Initiates a sync of a previously non synced contract.",
      "method": "PUT",
      "path": "/nft/:address/sync",
      "pathParams": [
        {
          "name": "address",
          "description": "The address of the NFT contract",
          "required": true,
          "example": "0xb47e3cd837dDF8e4c57F05d70Ab865de6e193BBB",
          "type": "string"
        }
      ],
      "queryParams": [
        {
          "name": "chain",
          "description": "The chain to query",
          "required": false,
          "example": "eth",
          "type": "string",
          "enum": [
            "eth",
            "0x1",
            "goerli",
            "0x5",
            "sepolia",
            "0xaa36a7",
            "polygon",
            "0x89",
            "mumbai",
            "0x13881",
            "bsc",
            "0x38",
            "bsc testnet",
            "0x61",
            "avalanche",
            "0xa86a",
            "avalanche testnet",
            "0xa869",
            "fantom",
            "0xfa",
            "palm",
            "0x2a15c308d",
            "cronos",
            "0x19",
            "cronos testnet",
            "0x152",
            "arbitrum",
            "0xa4b1"
          ]
        }
      ],
      "responses": [
        {
          "status": "201",
          "description": "Contract address was triggered for index."
        }
      ]
    },
    "reSyncMetadata": {
      "summary": "Resync NFT metadata",
      "description": "Resync the metadata for an NFT\n* The metadata flag will request the NFT's metadata from an already existing token_uri\n* The uri (default) flag will fetch the latest token_uri from the given NFT contract address. In sync mode the metadata will also be fetched\n* The sync mode will make the endpoint synchronous so it will wait for the task to be completed before responding\n* The async mode (default) will make the endpoint asynchronous so we will wait for the task to be completed before responding\n",
      "method": "GET",
      "path": "/nft/:address/:token_id/metadata/resync",
      "pathParams": [
        {
          "name": "address",
          "description": "The address of the NFT contract",
          "required": true,
          "example": "0xb47e3cd837dDF8e4c57F05d70Ab865de6e193BBB",
          "type": "string"
        },
        {
          "name": "token_id",
          "description": "The ID of the token",
          "required": true,
          "example": "1",
          "type": "string"
        }
      ],
      "queryParams": [
        {
          "name": "chain",
          "description": "The chain to query",
          "required": false,
          "example": "eth",
          "type": "string",
          "enum": [
            "eth",
            "0x1",
            "goerli",
            "0x5",
            "sepolia",
            "0xaa36a7",
            "polygon",
            "0x89",
            "mumbai",
            "0x13881",
            "bsc",
            "0x38",
            "bsc testnet",
            "0x61",
            "avalanche",
            "0xa86a",
            "avalanche testnet",
            "0xa869",
            "fantom",
            "0xfa",
            "palm",
            "0x2a15c308d",
            "cronos",
            "0x19",
            "cronos testnet",
            "0x152",
            "arbitrum",
            "0xa4b1"
          ]
        },
        {
          "name": "flag",
          "description": "The type of resync to operate",
          "required": false,
          "example": "uri",
          "type": "string"
        },
        {
          "name": "mode",
          "description": "To define the behaviour of the endpoint",
          "required": false,
          "example": "sync",
          "type": "string"
        }
      ],
      "responses": [
        {
          "status": "200",
          "description": "(In sync mode) Resync request executed.",
          "body": {
            "type": "object",
            "fields": [
              {
                "name": "status",
                "type": "string",
                "description": "The status of the resync request"
              }
            ]
          }
        },
        {
          "status": "202",
          "description": "The resync request was received and will be executed.",
          "body": {
            "type": "object",
            "fields": [
              {
                "name": "status",
                "type": "string",
                "description": "The status of the resync request"
              }
            ]
          }
        },
        {
          "status": "404",
          "description": "(In sync mode) Resync request executed and metadata could not be updated.",
          "body": {
            "type": "object",
            "fields": [
              {
                "name": "status",
                "type": "string",
                "description": "The status of the resync request"
              }
            ]
          }
        }
      ]
    },
    "getNFTLowestPrice": {
      "summary": "Get lowest price",
      "description": "Get the lowest executed price for an NFT contract for the last x days (only trades paid in ETH).",
      "method": "GET",
      "path": "/nft/:address/lowestprice",
      "pathParams": [
        {
          "name": "address",
          "description": "The address of the NFT contract",
          "required": true,
          "example": "0xb47e3cd837dDF8e4c57F05d70Ab865de6e193BBB",
          "type": "string"
        }
      ],
      "queryParams": [
        {
          "name": "chain",
          "description": "The chain to query",
          "required": false,
          "example": "eth",
          "type": "string",
          "enum": [
            "eth",
            "0x1",
            "goerli",
            "0x5",
            "sepolia",
            "0xaa36a7",
            "polygon",
            "0x89",
            "mumbai",
            "0x13881",
            "bsc",
            "0x38",
            "bsc testnet",
            "0x61",
            "avalanche",
            "0xa86a",
            "avalanche testnet",
            "0xa869",
            "fantom",
            "0xfa",
            "palm",
            "0x2a15c308d",
            "cronos",
            "0x19",
            "cronos testnet",
            "0x152",
            "arbitrum",
            "0xa4b1"
          ]
        },
        {
          "name": "days",
          "description": "The number of days to look back to find the lowest price\nIf not provided 7 days will be the default\n",
          "required": false,
          "type": "number"
        },
        {
          "name": "marketplace",
          "description": "Marketplace from which to get the trades (only OpenSea is supported at the moment)",
          "required": false,
          "example": "opensea",
          "type": "string"
        }
      ],
      "responses": [
        {
          "status": "200",
          "description": "Returns the trade with the lowest price",
          "body": {
            "type": "object",
            "fields": [
              {
                "name": "transaction_hash",
                "type": "string",
                "description": "The transaction hash",
                "example": "0x057Ec652A4F150f7FF94f089A38008f49a0DF88e"
              },
              {
                "name": "transaction_index",
                "type": "string",
                "description": "The transaction index"
              },
              {
                "name": "token_ids",
                "type": "array",
                "description": "The token ID(s) traded",
                "example": ["15", "54"],
                "items": { "type": "string", "example": "15" }
              },
              {
                "name": "seller_address",
                "type": "string",
                "description": "The address that sold the NFT",
                "example": "0x057Ec652A4F150f7FF94f089A38008f49a0DF88e"
              },
              {
                "name": "buyer_address",
                "type": "string",
                "description": "The address that bought the NFT",
                "example": "0x057Ec652A4F150f7FF94f089A38008f49a0DF88e"
              },
              {
                "name": "marketplace_address",
                "type": "string",
                "description": "The address of the contract that traded the NFT",
                "example": "0x057Ec652A4F150f7FF94f089A38008f49a0DF88e"
              },
              {
                "name": "price",
                "type": "string",
                "description": "The value that was sent in the transaction (ETH/BNB/etc..)",
                "example": "1000000000000000"
              },
              {
                "name": "block_timestamp",
                "type": "string",
                "description": "The block timestamp",
                "example": "2021-06-04T16:00:15"
              },
              {
                "name": "block_number",
                "type": "string",
                "description": "The block number of the transaction",
                "example": "13680123"
              },
              {
                "name": "block_hash",
                "type": "string",
                "description": "The block hash",
                "example": "0x4a7c916ca4a970358b9df90051008f729685ff05e9724a9dddba32630c37cb96"
              }
            ]
          }
        }
      ]
    },
    "searchNFTs": {
      "summary": "Search NFTs",
      "description": "Get NFTs that match a given metadata search query.",
      "method": "GET",
      "path": "/nft/search",
      "pathParams": [],
      "queryParams": [
        {
          "name": "chain",
          "description": "The chain to query",
          "required": false,
          "example": "eth",
          "type": "string",
          "enum": [
            "eth",
            "0x1",
            "goerli",
            "0x5",
            "sepolia",
            "0xaa36a7",
            "polygon",
            "0x89",
            "mumbai",
            "0x13881",
            "bsc",
            "0x38",
            "bsc testnet",
            "0x61",
            "avalanche",
            "0xa86a",
            "avalanche testnet",
            "0xa869",
            "fantom",
            "0xfa",
            "palm",
            "0x2a15c308d",
            "cronos",
            "0x19",
            "cronos testnet",
            "0x152",
            "arbitrum",
            "0xa4b1"
          ]
        },
        {
          "name": "format",
          "description": "The format of the token ID",
          "required": false,
          "example": "decimal",
          "type": "string"
        },
        {
          "name": "q",
          "description": "The search string",
          "required": true,
          "type": "string"
        },
        {
          "name": "filter",
          "description": "What fields the search should match on. To look into the entire metadata set the value to 'global'. To have a better response time you can look into a specific field like name",
          "required": false,
          "example": "name",
          "type": "string"
        },
        {
          "name": "from_block",
          "description": "The minimum block number from which to start the search\n* Provide the param 'from_block' or 'from_date'\n* If 'from_date' and 'from_block' are provided, 'from_block' will be used.\n",
          "required": false,
          "type": "number"
        },
        {
          "name": "to_block",
          "description": "The maximum block number from which to end the search\n* Provide the param 'to_block' or 'to_date'\n* If 'to_date' and 'to_block' are provided, 'to_block' will be used.\n",
          "required": false,
          "type": "number"
        },
        {
          "name": "from_date",
          "description": "The date from which to start the search (any format that is accepted by momentjs)\n* Provide the param 'from_block' or 'from_date'\n* If 'from_date' and 'from_block' are provided, 'from_block' will be used.\n",
          "required": false,
          "type": "string"
        },
        {
          "name": "to_date",
          "description": "Get search results up until this date (any format that is accepted by momentjs)\n* Provide the param 'to_block' or 'to_date'\n* If 'to_date' and 'to_block' are provided, 'to_block' will be used.\n",
          "type": "string"
        },
        {
          "name": "addresses",
          "description": "The addresses to get metadata for",
          "required": false,
          "type": "array",
          "field": { "type": "string" }
        },
        {
          "name": "cursor",
          "description": "The cursor returned in the previous response (used for getting the next page).",
          "required": false,
          "type": "string"
        },
        {
          "name": "limit",
          "description": "The desired page size of the result.",
          "required": false,
          "type": "number"
        }
      ],
      "responses": [
        {
          "status": "200",
          "description": "Returns the matching NFTs",
          "body": {
            "type": "object",
            "fields": [
              {
                "name": "total",
                "type": "number",
                "description": "The total number of matches for this query",
                "example": "2000"
              },
              {
                "name": "page",
                "type": "number",
                "description": "The current page of the result",
                "example": "2"
              },
              {
                "name": "page_size",
                "type": "number",
                "description": "The number of results per page",
                "example": "100"
              },
              {
                "name": "result",
                "type": "object",
                "fields": [
                  {
                    "name": "token_id",
                    "type": "string",
                    "description": "The token ID of the NFT",
                    "example": "889"
                  },
                  {
                    "name": "token_address",
                    "type": "string",
                    "description": "The address of the NFT contract",
                    "example": "0x8ce66ff0865570d1ff0bb0098fa41b4dc61e02e6"
                  },
                  {
                    "name": "token_uri",
                    "type": "string",
                    "description": "The URI to the metadata of the token",
                    "example": "https://ipfs.moralis.io:2053/ipfs/QmZZbo8u8zEWg7wtmZhJS2W718WL6FA95T4XdgmCcLp1SJ/889.json"
                  },
                  {
                    "name": "metadata",
                    "type": "string",
                    "description": "The metadata of the token",
                    "example": "{\"name\":\"Bape #889\",\"description\":\"The #1 metavestor clan (NFT/DAO) by a team with multi billion dollar company experience.\",\"image\":\"https://bapesclan.mypinata.cloud/ipfs/QmTSUD5JA6qHaC5t25mcXySfz19AV9u4Mb6Na7ntQ6tEwf/889.jpg\",\"attributes\":[{\"trait_type\":\"Background\",\"value\":\"Black\"},{\"trait_type\":\"Body\",\"value\":\"Man\"},{\"trait_type\":\"Dress\",\"value\":\"Suit Tie Blue\"},{\"trait_type\":\"Face\",\"value\":\"Pipe\"},{\"trait_type\":\"Eye\",\"value\":\"Eye\"}]}"
                  },
                  { "name": "is_valid", "type": "number", "example": "1" },
                  { "name": "syncing", "type": "number", "example": "2" },
                  { "name": "frozen", "type": "number", "example": "0" },
                  { "name": "resyncing", "type": "number", "example": "0" },
                  {
                    "name": "contract_type",
                    "type": "string",
                    "description": "The type of NFT contract standard",
                    "example": "ERC721"
                  },
                  {
                    "name": "token_hash",
                    "type": "string",
                    "example": "fffa3102469ce77f569893d16d5884f9"
                  },
                  {
                    "name": "batch_id",
                    "type": "string",
                    "example": "fd995c8a-f8b2-40cb-a407-f43e552638b4"
                  },
                  {
                    "name": "metadata_name",
                    "type": "string",
                    "example": "Bape #889"
                  },
                  {
                    "name": "metadata_description",
                    "type": "string",
                    "example": "The #1 metavestor clan (NFT/DAO) by a team with multi billion dollar company experience."
                  },
                  {
                    "name": "metadata_attributes",
                    "type": "string",
                    "example": "[{\"trait_type\":\"Background\",\"value\":\"Black\"},{\"trait_type\":\"Body\",\"value\":\"Man\"},{\"trait_type\":\"Dress\",\"value\":\"Suit Tie Blue\"},{\"trait_type\":\"Face\",\"value\":\"Pipe\"},{\"trait_type\":\"Eye\",\"value\":\"Eye\"}]"
                  },
                  {
                    "name": "block_number_minted",
                    "type": "string",
                    "example": "14265936"
                  },
                  {
                    "name": "opensea_lookup",
                    "type": "object",
                    "example": null
                  },
                  {
                    "name": "minter_address",
                    "type": "string",
                    "example": "0xdcf086e3f7954b38180daae1405569da86588bfe"
                  },
                  {
                    "name": "transaction_minted",
                    "type": "string",
                    "example": "0x2c8d7ec7a8439b0f67b50e93be63242de52e9b5cdfc7dc0aee80c6a2f104c41a"
                  },
                  {
                    "name": "frozen_log_index",
                    "type": "object",
                    "example": null
                  },
                  { "name": "imported", "type": "object", "example": null },
                  {
                    "name": "last_token_uri_sync",
                    "type": "string",
                    "description": "When the token_uri was last updated",
                    "example": "2021-02-24T00:47:26.647Z"
                  },
                  {
                    "name": "last_metadata_sync",
                    "type": "string",
                    "description": "When the metadata was last updated",
                    "example": "2021-02-24T00:47:26.647Z"
                  },
                  {
                    "name": "createdAt",
                    "type": "string",
                    "example": "2022-02-24T00:47:26.647Z"
                  },
                  {
                    "name": "updatedAt",
                    "type": "string",
                    "example": "2022-04-09T23:56:44.807Z"
                  }
                ]
              }
            ]
          }
        }
      ]
    }
  },
  "token": {
    "getTokenPrice": {
      "summary": "Get price",
      "description": "Get the token price denominated in the blockchain's native token and USD.",
      "method": "GET",
      "path": "/erc20/:address/price",
      "pathParams": [
        {
          "name": "address",
          "description": "The address of the token contract",
          "required": true,
          "example": "0x7d1afa7b718fb893db30a3abc0cfc608aacfebb0",
          "type": "string"
        }
      ],
      "queryParams": [
        {
          "name": "chain",
          "description": "The chain to query",
          "required": false,
          "example": "eth",
          "type": "string",
          "enum": [
            "eth",
            "0x1",
            "goerli",
            "0x5",
            "sepolia",
            "0xaa36a7",
            "polygon",
            "0x89",
            "mumbai",
            "0x13881",
            "bsc",
            "0x38",
            "bsc testnet",
            "0x61",
            "avalanche",
            "0xa86a",
            "avalanche testnet",
            "0xa869",
            "fantom",
            "0xfa",
            "palm",
            "0x2a15c308d",
            "cronos",
            "0x19",
            "cronos testnet",
            "0x152",
            "arbitrum",
            "0xa4b1"
          ]
        },
        {
          "name": "exchange",
          "description": "The factory name or address of the token exchange",
          "required": false,
          "type": "string"
        },
        {
          "name": "to_block",
          "description": "The block number from which the token price should be checked",
          "required": false,
          "type": "number"
        }
      ],
      "responses": [
        {
          "status": "200",
          "description": "Returns the price denominated in the blockchain's native token and USD for a given token contract address",
          "body": {
            "type": "object",
            "fields": [
              { "name": "nativePrice" },
              {
                "name": "usdPrice",
                "type": "number",
                "description": "The price in USD for the token",
                "example": "19.722370676"
              },
              {
                "name": "exchangeAddress",
                "type": "string",
                "description": "The address of the exchange used to calculate the price",
                "example": "0x1f98431c8ad98523631ae4a59f267346ea31f984"
              },
              {
                "name": "exchangeName",
                "type": "string",
                "description": "The name of the exchange used to calculate the price",
                "example": "Uniswap v3"
              }
            ]
          }
        }
      ]
    },
    "getWalletTokenBalances": {
      "summary": "Get balance by wallet",
      "description": "Get token balances for a specific wallet address.",
      "method": "GET",
      "path": "/:address/erc20",
      "pathParams": [
        {
          "name": "address",
          "description": "The address from which token balances will be checked",
          "required": true,
          "example": "0xd8da6bf26964af9d7eed9e03e53415d37aa96045",
          "type": "string"
        }
      ],
      "queryParams": [
        {
          "name": "chain",
          "description": "The chain to query",
          "required": false,
          "example": "eth",
          "type": "string",
          "enum": [
            "eth",
            "0x1",
            "goerli",
            "0x5",
            "sepolia",
            "0xaa36a7",
            "polygon",
            "0x89",
            "mumbai",
            "0x13881",
            "bsc",
            "0x38",
            "bsc testnet",
            "0x61",
            "avalanche",
            "0xa86a",
            "avalanche testnet",
            "0xa869",
            "fantom",
            "0xfa",
            "palm",
            "0x2a15c308d",
            "cronos",
            "0x19",
            "cronos testnet",
            "0x152",
            "arbitrum",
            "0xa4b1"
          ]
        },
        {
          "name": "to_block",
          "description": "The block number from which the balances should be checked",
          "required": false,
          "type": "number"
        },
        {
          "name": "token_addresses",
          "description": "The addresses to get balances for (optional)",
          "required": false,
          "type": "array",
          "field": { "type": "string" }
        }
      ],
      "responses": [
        {
          "status": "200",
          "description": "Returns token balances for a specific address"
        }
      ]
    },
    "getWalletTokenTransfers": {
      "summary": "Get transactions by wallet",
      "description": "Get ERC20 token transactions ordered by block number in descending order.",
      "method": "GET",
      "path": "/:address/erc20/transfers",
      "pathParams": [
        {
          "name": "address",
          "description": "The address of the wallet",
          "required": true,
          "example": "0xd8da6bf26964af9d7eed9e03e53415d37aa96045",
          "type": "string"
        }
      ],
      "queryParams": [
        {
          "name": "chain",
          "description": "The chain to query",
          "required": false,
          "example": "eth",
          "type": "string",
          "enum": [
            "eth",
            "0x1",
            "goerli",
            "0x5",
            "sepolia",
            "0xaa36a7",
            "polygon",
            "0x89",
            "mumbai",
            "0x13881",
            "bsc",
            "0x38",
            "bsc testnet",
            "0x61",
            "avalanche",
            "0xa86a",
            "avalanche testnet",
            "0xa869",
            "fantom",
            "0xfa",
            "palm",
            "0x2a15c308d",
            "cronos",
            "0x19",
            "cronos testnet",
            "0x152",
            "arbitrum",
            "0xa4b1"
          ]
        },
        {
          "name": "from_block",
          "description": "The minimum block number from which to get the transactions\n* Provide the param 'from_block' or 'from_date'\n* If 'from_date' and 'from_block' are provided, 'from_block' will be used.\n",
          "required": false,
          "type": "number"
        },
        {
          "name": "to_block",
          "description": "The maximum block number from which to get the transactions.\n* Provide the param 'to_block' or 'to_date'\n* If 'to_date' and 'to_block' are provided, 'to_block' will be used.\n",
          "required": false,
          "type": "number"
        },
        {
          "name": "from_date",
          "description": "The start date from which to get the transactions (any format that is accepted by momentjs)\n* Provide the param 'from_block' or 'from_date'\n* If 'from_date' and 'from_block' are provided, 'from_block' will be used.\n",
          "required": false,
          "type": "string"
        },
        {
          "name": "to_date",
          "description": "Get the transactions up to this date (any format that is accepted by momentjs)\n* Provide the param 'to_block' or 'to_date'\n* If 'to_date' and 'to_block' are provided, 'to_block' will be used.\n",
          "type": "string"
        },
        {
          "name": "limit",
          "description": "The desired page size of the result.",
          "required": false,
          "type": "number"
        },
        {
          "name": "cursor",
          "description": "The cursor returned in the previous response (used for getting the next page).",
          "type": "string"
        }
      ],
      "responses": [
        {
          "status": "200",
          "description": "Returns a collection of token transactions.",
          "body": {
            "type": "object",
            "fields": [
              {
                "name": "total",
                "type": "number",
                "description": "The total number of matches for this query",
                "example": "2000"
              },
              {
                "name": "page",
                "type": "number",
                "description": "The current page of the result",
                "example": "2"
              },
              {
                "name": "page_size",
                "type": "number",
                "description": "The number of results per page",
                "example": "100"
              },
              {
                "name": "result",
                "type": "object",
                "fields": [
                  {
                    "name": "transaction_hash",
                    "type": "string",
                    "description": "The transaction hash",
                    "example": "0x2d30ca6f024dbc1307ac8a1a44ca27de6f797ec22ef20627a1307243b0ab7d09"
                  },
                  {
                    "name": "address",
                    "type": "string",
                    "description": "The address of the token",
                    "example": "0x057Ec652A4F150f7FF94f089A38008f49a0DF88e"
                  },
                  {
                    "name": "block_timestamp",
                    "type": "string",
                    "description": "The block timestamp",
                    "example": "2021-04-02T10:07:54.000Z"
                  },
                  {
                    "name": "block_number",
                    "type": "string",
                    "description": "The block number",
                    "example": 12526958
                  },
                  {
                    "name": "block_hash",
                    "type": "string",
                    "description": "The block hash",
                    "example": "0x0372c302e3c52e8f2e15d155e2c545e6d802e479236564af052759253b20fd86"
                  },
                  {
                    "name": "to_address",
                    "type": "string",
                    "description": "The recipient",
                    "example": "0x62AED87d21Ad0F3cdE4D147Fdcc9245401Af0044"
                  },
                  {
                    "name": "from_address",
                    "type": "string",
                    "description": "The sender",
                    "example": "0xd4a3BebD824189481FC45363602b83C9c7e9cbDf"
                  },
                  {
                    "name": "value",
                    "type": "string",
                    "description": "The value that was transferred (in wei)",
                    "example": 650000000000000000
                  },
                  {
                    "name": "transaction_index",
                    "type": "number",
                    "description": "The transaction index of the transfer within the block",
                    "example": 12
                  },
                  {
                    "name": "log_index",
                    "type": "number",
                    "description": "The log index of the transfer within the block",
                    "example": 2
                  }
                ]
              }
            ]
          }
        }
      ]
    },
    "getTokenMetadata": {
      "summary": "Get metadata by contract",
      "description": "Get the metadata for a given token contract address (name, symbol, decimals, logo).",
      "method": "GET",
      "path": "/erc20/metadata",
      "pathParams": [],
      "queryParams": [
        {
          "name": "chain",
          "description": "The chain to query",
          "required": false,
          "example": "eth",
          "type": "string",
          "enum": [
            "eth",
            "0x1",
            "goerli",
            "0x5",
            "sepolia",
            "0xaa36a7",
            "polygon",
            "0x89",
            "mumbai",
            "0x13881",
            "bsc",
            "0x38",
            "bsc testnet",
            "0x61",
            "avalanche",
            "0xa86a",
            "avalanche testnet",
            "0xa869",
            "fantom",
            "0xfa",
            "palm",
            "0x2a15c308d",
            "cronos",
            "0x19",
            "cronos testnet",
            "0x152",
            "arbitrum",
            "0xa4b1"
          ]
        },
        {
          "name": "addresses",
          "description": "The addresses to get metadata for",
          "required": true,
          "type": "array",
          "field": { "type": "string" }
        }
      ],
      "responses": [
        {
          "status": "200",
          "description": "Get the metadata for a given ERC20 token contract address (name, symbol, decimals, logo)."
        }
      ]
    },
    "getTokenMetadataBySymbol": {
      "summary": "Get metadata by symbols",
      "description": "Get the metadata for a list of token symbols (name, symbol, decimals, logo).",
      "method": "GET",
      "path": "/erc20/metadata/symbols",
      "pathParams": [],
      "queryParams": [
        {
          "name": "chain",
          "description": "The chain to query",
          "required": false,
          "example": "eth",
          "type": "string",
          "enum": [
            "eth",
            "0x1",
            "goerli",
            "0x5",
            "sepolia",
            "0xaa36a7",
            "polygon",
            "0x89",
            "mumbai",
            "0x13881",
            "bsc",
            "0x38",
            "bsc testnet",
            "0x61",
            "avalanche",
            "0xa86a",
            "avalanche testnet",
            "0xa869",
            "fantom",
            "0xfa",
            "palm",
            "0x2a15c308d",
            "cronos",
            "0x19",
            "cronos testnet",
            "0x152",
            "arbitrum",
            "0xa4b1"
          ]
        },
        {
          "name": "symbols",
          "description": "The symbols to get metadata for",
          "required": true,
          "type": "array",
          "field": { "type": "string", "example": "LINK" }
        }
      ],
      "responses": [
        {
          "status": "200",
          "description": "Returns metadata for a given token contract address (name, symbol, decimals, logo)."
        }
      ]
    },
    "getTokenAllowance": {
      "summary": "Get spender allowance",
      "description": "Get the amount which the spender is allowed to withdraw on behalf of the owner.",
      "method": "GET",
      "path": "/erc20/:address/allowance",
      "pathParams": [
        {
          "name": "address",
          "description": "The address of the token contract",
          "required": true,
          "type": "string"
        }
      ],
      "queryParams": [
        {
          "name": "chain",
          "description": "The chain to query",
          "required": false,
          "example": "eth",
          "type": "string",
          "enum": [
            "eth",
            "0x1",
            "goerli",
            "0x5",
            "sepolia",
            "0xaa36a7",
            "polygon",
            "0x89",
            "mumbai",
            "0x13881",
            "bsc",
            "0x38",
            "bsc testnet",
            "0x61",
            "avalanche",
            "0xa86a",
            "avalanche testnet",
            "0xa869",
            "fantom",
            "0xfa",
            "palm",
            "0x2a15c308d",
            "cronos",
            "0x19",
            "cronos testnet",
            "0x152",
            "arbitrum",
            "0xa4b1"
          ]
        },
        {
          "name": "owner_address",
          "description": "The address of the token owner",
          "required": true,
          "type": "string"
        },
        {
          "name": "spender_address",
          "description": "The address of the token spender",
          "required": true,
          "type": "string"
        }
      ],
      "responses": [
        {
          "status": "200",
          "description": "Returns the amount which the spender is allowed to withdraw on behalf of the owner.",
          "body": {
            "type": "object",
            "fields": [
              {
                "name": "allowance",
                "type": "string",
                "description": "The allowance"
              }
            ]
          }
        }
      ]
    },
    "getTokenTransfers": {
      "summary": "Get transactions by contract",
      "description": "Get ERC20 token transactions from a contract ordered by block number in descending order.",
      "method": "GET",
      "path": "/erc20/:address/transfers",
      "pathParams": [
        {
          "name": "address",
          "description": "The address of the token contract",
          "required": true,
          "example": "0x7d1afa7b718fb893db30a3abc0cfc608aacfebb0",
          "type": "string"
        }
      ],
      "queryParams": [
        {
          "name": "chain",
          "description": "The chain to query",
          "required": false,
          "example": "eth",
          "type": "string",
          "enum": [
            "eth",
            "0x1",
            "goerli",
            "0x5",
            "sepolia",
            "0xaa36a7",
            "polygon",
            "0x89",
            "mumbai",
            "0x13881",
            "bsc",
            "0x38",
            "bsc testnet",
            "0x61",
            "avalanche",
            "0xa86a",
            "avalanche testnet",
            "0xa869",
            "fantom",
            "0xfa",
            "palm",
            "0x2a15c308d",
            "cronos",
            "0x19",
            "cronos testnet",
            "0x152",
            "arbitrum",
            "0xa4b1"
          ]
        },
        {
          "name": "from_block",
          "description": "The minimum block number from which to get the transfers\n* Provide the param 'from_block' or 'from_date'\n* If 'from_date' and 'from_block' are provided, 'from_block' will be used.\n",
          "required": false,
          "type": "number"
        },
        {
          "name": "to_block",
          "description": "The maximum block number from which to get the transfers.\n* Provide the param 'to_block' or 'to_date'\n* If 'to_date' and 'to_block' are provided, 'to_block' will be used.\n",
          "required": false,
          "type": "number"
        },
        {
          "name": "from_date",
          "description": "The start date from which to get the transfers (any format that is accepted by momentjs)\n* Provide the param 'from_block' or 'from_date'\n* If 'from_date' and 'from_block' are provided, 'from_block' will be used.\n",
          "required": false,
          "type": "string"
        },
        {
          "name": "to_date",
          "description": "Get the transfers up to this date (any format that is accepted by momentjs)\n* Provide the param 'to_block' or 'to_date'\n* If 'to_date' and 'to_block' are provided, 'to_block' will be used.\n",
          "type": "string"
        },
        {
          "name": "offset",
          "description": "offset",
          "required": false,
          "type": "number"
        },
        {
          "name": "limit",
          "description": "The desired page size of the result.",
          "required": false,
          "type": "number"
        }
      ],
      "responses": [
        {
          "status": "200",
          "description": "Returns a collection of token contract transactions.",
          "body": {
            "type": "object",
            "fields": [
              {
                "name": "total",
                "type": "number",
                "description": "The total number of matches for this query",
                "example": "2000"
              },
              {
                "name": "page",
                "type": "number",
                "description": "The current page of the result",
                "example": "2"
              },
              {
                "name": "page_size",
                "type": "number",
                "description": "The number of results per page",
                "example": "100"
              },
              {
                "name": "result",
                "type": "object",
                "fields": [
                  {
                    "name": "transaction_hash",
                    "type": "string",
                    "description": "The transaction hash",
                    "example": "0x2d30ca6f024dbc1307ac8a1a44ca27de6f797ec22ef20627a1307243b0ab7d09"
                  },
                  {
                    "name": "address",
                    "type": "string",
                    "description": "The address of the token",
                    "example": "0x057Ec652A4F150f7FF94f089A38008f49a0DF88e"
                  },
                  {
                    "name": "block_timestamp",
                    "type": "string",
                    "description": "The block timestamp",
                    "example": "2021-04-02T10:07:54.000Z"
                  },
                  {
                    "name": "block_number",
                    "type": "string",
                    "description": "The block number",
                    "example": 12526958
                  },
                  {
                    "name": "block_hash",
                    "type": "string",
                    "description": "The block hash",
                    "example": "0x0372c302e3c52e8f2e15d155e2c545e6d802e479236564af052759253b20fd86"
                  },
                  {
                    "name": "to_address",
                    "type": "string",
                    "description": "The recipient",
                    "example": "0x62AED87d21Ad0F3cdE4D147Fdcc9245401Af0044"
                  },
                  {
                    "name": "from_address",
                    "type": "string",
                    "description": "The sender",
                    "example": "0xd4a3BebD824189481FC45363602b83C9c7e9cbDf"
                  },
                  {
                    "name": "value",
                    "type": "string",
                    "description": "The value that was transferred (in wei)",
                    "example": 650000000000000000
                  },
                  {
                    "name": "transaction_index",
                    "type": "number",
                    "description": "The transaction index of the transfer within the block",
                    "example": 12
                  },
                  {
                    "name": "log_index",
                    "type": "number",
                    "description": "The log index of the transfer within the block",
                    "example": 2
                  }
                ]
              }
            ]
          }
        }
      ]
    }
  },
  "balance": {
    "getNativeBalance": {
      "summary": "Get balance by wallet",
      "description": "Get the native balance for a specific wallet address.",
      "method": "GET",
      "path": "/:address/balance",
      "pathParams": [
        {
          "name": "address",
          "description": "The address from which the native balance will be checked",
          "required": true,
          "example": "0x057Ec652A4F150f7FF94f089A38008f49a0DF88e",
          "type": "string"
        }
      ],
      "queryParams": [
        {
          "name": "chain",
          "description": "The chain to query",
          "required": false,
          "example": "eth",
          "type": "string",
          "enum": [
            "eth",
            "0x1",
            "goerli",
            "0x5",
            "sepolia",
            "0xaa36a7",
            "polygon",
            "0x89",
            "mumbai",
            "0x13881",
            "bsc",
            "0x38",
            "bsc testnet",
            "0x61",
            "avalanche",
            "0xa86a",
            "avalanche testnet",
            "0xa869",
            "fantom",
            "0xfa",
            "palm",
            "0x2a15c308d",
            "cronos",
            "0x19",
            "cronos testnet",
            "0x152",
            "arbitrum",
            "0xa4b1"
          ]
        },
        {
          "name": "to_block",
          "description": "The block number from which the balances should be checked",
          "required": false,
          "type": "number"
        }
      ],
      "responses": [
        {
          "status": "200",
          "description": "Returns the native balance for a specific address",
          "body": {
            "type": "object",
            "fields": [
              {
                "name": "balance",
                "type": "string",
                "description": "The balance",
                "example": "1234567890"
              }
            ]
          }
        }
      ]
    }
  },
  "transaction": {
    "getWalletTransactions": {
      "summary": "Get transactions by wallet",
      "description": "Get native transactions ordered by block number in descending order.",
      "method": "GET",
      "path": "/:address",
      "pathParams": [
        {
          "name": "address",
          "description": "The address of the wallet",
          "required": true,
          "example": "0xd8da6bf26964af9d7eed9e03e53415d37aa96045",
          "type": "string"
        }
      ],
      "queryParams": [
        {
          "name": "chain",
          "description": "The chain to query",
          "required": false,
          "example": "eth",
          "type": "string",
          "enum": [
            "eth",
            "0x1",
            "goerli",
            "0x5",
            "sepolia",
            "0xaa36a7",
            "polygon",
            "0x89",
            "mumbai",
            "0x13881",
            "bsc",
            "0x38",
            "bsc testnet",
            "0x61",
            "avalanche",
            "0xa86a",
            "avalanche testnet",
            "0xa869",
            "fantom",
            "0xfa",
            "palm",
            "0x2a15c308d",
            "cronos",
            "0x19",
            "cronos testnet",
            "0x152",
            "arbitrum",
            "0xa4b1"
          ]
        },
        {
          "name": "from_block",
          "description": "The minimum block number from which to get the transactions\n* Provide the param 'from_block' or 'from_date'\n* If 'from_date' and 'from_block' are provided, 'from_block' will be used.\n",
          "required": false,
          "type": "number"
        },
        {
          "name": "to_block",
          "description": "The maximum block number from which to get the transactions.\n* Provide the param 'to_block' or 'to_date'\n* If 'to_date' and 'to_block' are provided, 'to_block' will be used.\n",
          "required": false,
          "type": "number"
        },
        {
          "name": "from_date",
          "description": "The start date from which to get the transactions (any format that is accepted by momentjs)\n* Provide the param 'from_block' or 'from_date'\n* If 'from_date' and 'from_block' are provided, 'from_block' will be used.\n",
          "required": false,
          "type": "string"
        },
        {
          "name": "to_date",
          "description": "Get the transactions up to this date (any format that is accepted by momentjs)\n* Provide the param 'to_block' or 'to_date'\n* If 'to_date' and 'to_block' are provided, 'to_block' will be used.\n",
          "type": "string"
        },
        {
          "name": "cursor",
          "description": "The cursor returned in the previous response (used for getting the next page).",
          "type": "string"
        },
        {
          "name": "limit",
          "description": "The desired page size of the result.",
          "required": false,
          "type": "number"
        }
      ],
      "responses": [
        {
          "status": "200",
          "description": "Returns a collection of native transactions.",
          "body": {
            "type": "object",
            "fields": [
              {
                "name": "total",
                "type": "number",
                "description": "The total number of matches for this query",
                "example": "2000"
              },
              {
                "name": "page",
                "type": "number",
                "description": "The current page of the result",
                "example": "2"
              },
              {
                "name": "page_size",
                "type": "number",
                "description": "The number of results per page",
                "example": "100"
              },
              {
                "name": "result",
                "type": "object",
                "fields": [
                  {
                    "name": "hash",
                    "type": "string",
                    "description": "The hash of the transaction",
                    "example": "0x057Ec652A4F150f7FF94f089A38008f49a0DF88e"
                  },
                  {
                    "name": "nonce",
                    "type": "string",
                    "description": "The nonce of the transaction",
                    "example": 326595425
                  },
                  {
                    "name": "transaction_index",
                    "type": "string",
                    "description": "The transaction index",
                    "example": 25
                  },
                  {
                    "name": "from_address",
                    "type": "string",
                    "description": "The sender",
                    "example": "0xd4a3BebD824189481FC45363602b83C9c7e9cbDf"
                  },
                  {
                    "name": "to_address",
                    "type": "string",
                    "description": "The recipient",
                    "example": "0xa71db868318f0a0bae9411347cd4a6fa23d8d4ef"
                  },
                  {
                    "name": "value",
                    "type": "string",
                    "description": "The value that was transferred (in wei)",
                    "example": 650000000000000000
                  },
                  {
                    "name": "gas",
                    "type": "string",
                    "description": "The gas of the transaction",
                    "example": 6721975
                  },
                  {
                    "name": "gas_price",
                    "type": "string",
                    "description": "The gas price",
                    "example": 20000000000
                  },
                  {
                    "name": "input",
                    "type": "string",
                    "description": "The input"
                  },
                  {
                    "name": "receipt_cumulative_gas_used",
                    "type": "string",
                    "description": "The receipt cumulative gas used",
                    "example": 1340925
                  },
                  {
                    "name": "receipt_gas_used",
                    "type": "string",
                    "description": "The receipt gas used",
                    "example": 1340925
                  },
                  {
                    "name": "receipt_contract_address",
                    "type": "string",
                    "description": "The receipt contract address",
                    "example": "0x1d6a4cf64b52f6c73f201839aded7379ce58059c"
                  },
                  {
                    "name": "receipt_root",
                    "type": "string",
                    "description": "The receipt root"
                  },
                  {
                    "name": "receipt_status",
                    "type": "string",
                    "description": "The receipt status",
                    "example": 1
                  },
                  {
                    "name": "block_timestamp",
                    "type": "string",
                    "description": "The block timestamp",
                    "example": "2021-04-02T10:07:54.000Z"
                  },
                  {
                    "name": "block_number",
                    "type": "string",
                    "description": "The block number",
                    "example": 12526958
                  },
                  {
                    "name": "block_hash",
                    "type": "string",
                    "description": "The block hash",
                    "example": "0x0372c302e3c52e8f2e15d155e2c545e6d802e479236564af052759253b20fd86"
                  }
                ]
              }
            ]
          }
        }
      ]
    },
    "getWalletTransactionsVerbose": {
      "summary": "Get verbose transactions by wallet",
      "description": "Get native transactions and logs ordered by block number in descending order.",
      "method": "GET",
      "path": "/:address/verbose",
      "pathParams": [
        {
          "name": "address",
          "description": "The address of the wallet",
          "required": true,
          "example": "0xd8da6bf26964af9d7eed9e03e53415d37aa96045",
          "type": "string"
        }
      ],
      "queryParams": [
        {
          "name": "chain",
          "description": "The chain to query",
          "required": false,
          "example": "eth",
          "type": "string",
          "enum": [
            "eth",
            "0x1",
            "goerli",
            "0x5",
            "sepolia",
            "0xaa36a7",
            "polygon",
            "0x89",
            "mumbai",
            "0x13881",
            "bsc",
            "0x38",
            "bsc testnet",
            "0x61",
            "avalanche",
            "0xa86a",
            "avalanche testnet",
            "0xa869",
            "fantom",
            "0xfa",
            "palm",
            "0x2a15c308d",
            "cronos",
            "0x19",
            "cronos testnet",
            "0x152",
            "arbitrum",
            "0xa4b1"
          ]
        },
        {
          "name": "from_block",
          "description": "The minimum block number from which to get the transactions\n* Provide the param 'from_block' or 'from_date'\n* If 'from_date' and 'from_block' are provided, 'from_block' will be used.\n",
          "required": false,
          "type": "number"
        },
        {
          "name": "to_block",
          "description": "The maximum block number from which to get the transactions.\n* Provide the param 'to_block' or 'to_date'\n* If 'to_date' and 'to_block' are provided, 'to_block' will be used.\n",
          "required": false,
          "type": "number"
        },
        {
          "name": "from_date",
          "description": "The start date from which to get the transactions (any format that is accepted by momentjs)\n* Provide the param 'from_block' or 'from_date'\n* If 'from_date' and 'from_block' are provided, 'from_block' will be used.\n",
          "required": false,
          "type": "string"
        },
        {
          "name": "to_date",
          "description": "Get the transactions up to this date (any format that is accepted by momentjs)\n* Provide the param 'to_block' or 'to_date'\n* If 'to_date' and 'to_block' are provided, 'to_block' will be used.\n",
          "type": "string"
        },
        {
          "name": "cursor",
          "description": "The cursor returned in the previous response (used for getting the next page).",
          "type": "string"
        },
        {
          "name": "limit",
          "description": "The desired page size of the result.",
          "required": false,
          "type": "number"
        }
      ],
      "responses": [
        {
          "status": "200",
          "description": "Returns a collection of native transactions.",
          "body": {
            "type": "object",
            "fields": [
              {
                "name": "page",
                "type": "number",
                "description": "The current page of the result",
                "example": "2"
              },
              {
                "name": "page_size",
                "type": "number",
                "description": "The number of results per page",
                "example": "100"
              },
              {
                "name": "result",
                "type": "object",
                "fields": [
                  {
                    "name": "hash",
                    "type": "string",
                    "description": "The hash of the transaction",
                    "example": "0x1ed85b3757a6d31d01a4d6677fc52fd3911d649a0af21fe5ca3f886b153773ed"
                  },
                  {
                    "name": "nonce",
                    "type": "string",
                    "description": "The nonce",
                    "example": "1848059"
                  },
                  {
                    "name": "transaction_index",
                    "type": "string",
                    "example": "108"
                  },
                  {
                    "name": "from_address",
                    "type": "string",
                    "description": "The from address",
                    "example": "0x267be1c1d684f78cb4f6a176c4911b741e4ffdc0"
                  },
                  {
                    "name": "to_address",
                    "type": "string",
                    "description": "The to address",
                    "example": "0x003dde3494f30d861d063232c6a8c04394b686ff"
                  },
                  {
                    "name": "value",
                    "type": "string",
                    "description": "The value sent",
                    "example": "115580000000000000"
                  },
                  { "name": "gas", "type": "string", "example": "30000" },
                  {
                    "name": "gas_price",
                    "type": "string",
                    "description": "The gas price",
                    "example": "52500000000"
                  },
                  { "name": "input", "type": "string", "example": "0x" },
                  {
                    "name": "receipt_cumulative_gas_used",
                    "type": "string",
                    "example": "4923073"
                  },
                  {
                    "name": "receipt_gas_used",
                    "type": "string",
                    "example": "21000"
                  },
                  {
                    "name": "receipt_contract_address",
                    "type": "string",
                    "example": null
                  },
                  { "name": "receipt_root", "type": "string", "example": null },
                  {
                    "name": "receipt_status",
                    "type": "string",
                    "example": "1"
                  },
                  {
                    "name": "block_timestamp",
                    "type": "string",
                    "description": "The block timestamp",
                    "example": "2021-05-07T11:08:35.000Z"
                  },
                  {
                    "name": "block_number",
                    "type": "string",
                    "description": "The block number",
                    "example": "12386788"
                  },
                  {
                    "name": "block_hash",
                    "type": "string",
                    "description": "The hash of the block",
                    "example": "0x9b559aef7ea858608c2e554246fe4a24287e7aeeb976848df2b9a2531f4b9171"
                  },
                  {
                    "name": "logs",
                    "type": "object",
                    "description": "The logs of the transaction",
                    "fields": [
                      {
                        "name": "log_index",
                        "type": "string",
                        "example": "273"
                      },
                      {
                        "name": "transaction_hash",
                        "type": "string",
                        "description": "The hash of the transaction",
                        "example": "0xdd9006489e46670e0e85d1fb88823099e7f596b08aeaac023e9da0851f26fdd5"
                      },
                      {
                        "name": "transaction_index",
                        "type": "string",
                        "example": "204"
                      },
                      {
                        "name": "address",
                        "type": "string",
                        "description": "The address of the contract",
                        "example": "0x3105d328c66d8d55092358cf595d54608178e9b5"
                      },
                      {
                        "name": "data",
                        "type": "string",
                        "description": "The data of the log",
                        "example": "0x00000000000000000000000000000000000000000000000de05239bccd4d537400000000000000000000000000024dbc80a9f80e3d5fc0a0ee30e2693781a443"
                      },
                      {
                        "name": "topic0",
                        "type": "string",
                        "example": "0x2caecd17d02f56fa897705dcc740da2d237c373f70686f4e0d9bd3bf0400ea7a"
                      },
                      {
                        "name": "topic1",
                        "type": "string",
                        "example": "0x000000000000000000000000031002d15b0d0cd7c9129d6f644446368deae391"
                      },
                      {
                        "name": "topic2",
                        "type": "string",
                        "example": "0x000000000000000000000000d25943be09f968ba740e0782a34e710100defae9"
                      },
                      { "name": "topic3", "type": "string", "example": null },
                      {
                        "name": "block_timestamp",
                        "type": "string",
                        "description": "The timestamp of the block",
                        "example": "2021-05-07T11:08:35.000Z"
                      },
                      {
                        "name": "block_number",
                        "type": "string",
                        "description": "The block number",
                        "example": "12386788"
                      },
                      {
                        "name": "block_hash",
                        "type": "string",
                        "description": "The hash of the block",
                        "example": "0x9b559aef7ea858608c2e554246fe4a24287e7aeeb976848df2b9a2531f4b9171"
                      }
                    ]
                  }
                ]
              }
            ]
          }
        }
      ]
    },
    "getTransaction": {
      "summary": "Get transaction by hash",
      "description": "Get the contents of a transaction by the given transaction hash.",
      "method": "GET",
      "path": "/transaction/:transaction_hash",
      "pathParams": [
        {
          "name": "transaction_hash",
          "description": "The transaction hash",
          "required": true,
          "example": "0xdc85cb1b75fd09c2f6d001fea4aba83764193cbd7881a1fa8ccde350a5681109",
          "type": "string"
        }
      ],
      "queryParams": [
        {
          "name": "chain",
          "description": "The chain to query",
          "required": false,
          "example": "eth",
          "type": "string",
          "enum": [
            "eth",
            "0x1",
            "goerli",
            "0x5",
            "sepolia",
            "0xaa36a7",
            "polygon",
            "0x89",
            "mumbai",
            "0x13881",
            "bsc",
            "0x38",
            "bsc testnet",
            "0x61",
            "avalanche",
            "0xa86a",
            "avalanche testnet",
            "0xa869",
            "fantom",
            "0xfa",
            "palm",
            "0x2a15c308d",
            "cronos",
            "0x19",
            "cronos testnet",
            "0x152",
            "arbitrum",
            "0xa4b1"
          ]
        }
      ],
      "responses": [
        {
          "status": "200",
          "description": "Transaction details by transaction hash",
          "body": {
            "type": "object",
            "fields": [
              {
                "name": "hash",
                "type": "string",
                "description": "The hash of the transaction",
                "example": "0x1ed85b3757a6d31d01a4d6677fc52fd3911d649a0af21fe5ca3f886b153773ed"
              },
              {
                "name": "nonce",
                "type": "string",
                "description": "The nonce",
                "example": "1848059"
              },
              {
                "name": "transaction_index",
                "type": "string",
                "example": "108"
              },
              {
                "name": "from_address",
                "type": "string",
                "description": "The from address",
                "example": "0x267be1c1d684f78cb4f6a176c4911b741e4ffdc0"
              },
              {
                "name": "to_address",
                "type": "string",
                "description": "The to address",
                "example": "0x003dde3494f30d861d063232c6a8c04394b686ff"
              },
              {
                "name": "value",
                "type": "string",
                "description": "The value sent",
                "example": "115580000000000000"
              },
              { "name": "gas", "type": "string", "example": "30000" },
              {
                "name": "gas_price",
                "type": "string",
                "description": "The gas price",
                "example": "52500000000"
              },
              { "name": "input", "type": "string", "example": "0x" },
              {
                "name": "receipt_cumulative_gas_used",
                "type": "string",
                "example": "4923073"
              },
              {
                "name": "receipt_gas_used",
                "type": "string",
                "example": "21000"
              },
              {
                "name": "receipt_contract_address",
                "type": "string",
                "example": null
              },
              { "name": "receipt_root", "type": "string", "example": null },
              { "name": "receipt_status", "type": "string", "example": "1" },
              {
                "name": "block_timestamp",
                "type": "string",
                "description": "The block timestamp",
                "example": "2021-05-07T11:08:35.000Z"
              },
              {
                "name": "block_number",
                "type": "string",
                "description": "The block number",
                "example": "12386788"
              },
              {
                "name": "block_hash",
                "type": "string",
                "description": "The hash of the block",
                "example": "0x9b559aef7ea858608c2e554246fe4a24287e7aeeb976848df2b9a2531f4b9171"
              },
              {
                "name": "logs",
                "type": "object",
                "description": "The logs of the transaction",
                "fields": [
                  { "name": "log_index", "type": "string", "example": "273" },
                  {
                    "name": "transaction_hash",
                    "type": "string",
                    "description": "The hash of the transaction",
                    "example": "0xdd9006489e46670e0e85d1fb88823099e7f596b08aeaac023e9da0851f26fdd5"
                  },
                  {
                    "name": "transaction_index",
                    "type": "string",
                    "example": "204"
                  },
                  {
                    "name": "address",
                    "type": "string",
                    "description": "The address of the contract",
                    "example": "0x3105d328c66d8d55092358cf595d54608178e9b5"
                  },
                  {
                    "name": "data",
                    "type": "string",
                    "description": "The data of the log",
                    "example": "0x00000000000000000000000000000000000000000000000de05239bccd4d537400000000000000000000000000024dbc80a9f80e3d5fc0a0ee30e2693781a443"
                  },
                  {
                    "name": "topic0",
                    "type": "string",
                    "example": "0x2caecd17d02f56fa897705dcc740da2d237c373f70686f4e0d9bd3bf0400ea7a"
                  },
                  {
                    "name": "topic1",
                    "type": "string",
                    "example": "0x000000000000000000000000031002d15b0d0cd7c9129d6f644446368deae391"
                  },
                  {
                    "name": "topic2",
                    "type": "string",
                    "example": "0x000000000000000000000000d25943be09f968ba740e0782a34e710100defae9"
                  },
                  { "name": "topic3", "type": "string", "example": null },
                  {
                    "name": "block_timestamp",
                    "type": "string",
                    "description": "The timestamp of the block",
                    "example": "2021-05-07T11:08:35.000Z"
                  },
                  {
                    "name": "block_number",
                    "type": "string",
                    "description": "The block number",
                    "example": "12386788"
                  },
                  {
                    "name": "block_hash",
                    "type": "string",
                    "description": "The hash of the block",
                    "example": "0x9b559aef7ea858608c2e554246fe4a24287e7aeeb976848df2b9a2531f4b9171"
                  }
                ]
              }
            ]
          }
        }
      ]
    }
  },
  "events": {
    "getContractLogs": {
      "summary": "Get logs by contract",
      "description": "Get the logs for a contract.",
      "method": "GET",
      "path": "/:address/logs",
      "pathParams": [
        {
          "name": "address",
          "description": "The address of the contract",
          "required": true,
          "example": "0x7d1afa7b718fb893db30a3abc0cfc608aacfebb0",
          "type": "string"
        }
      ],
      "queryParams": [
        {
          "name": "chain",
          "description": "The chain to query",
          "required": false,
          "example": "eth",
          "type": "string",
          "enum": [
            "eth",
            "0x1",
            "goerli",
            "0x5",
            "sepolia",
            "0xaa36a7",
            "polygon",
            "0x89",
            "mumbai",
            "0x13881",
            "bsc",
            "0x38",
            "bsc testnet",
            "0x61",
            "avalanche",
            "0xa86a",
            "avalanche testnet",
            "0xa869",
            "fantom",
            "0xfa",
            "palm",
            "0x2a15c308d",
            "cronos",
            "0x19",
            "cronos testnet",
            "0x152",
            "arbitrum",
            "0xa4b1"
          ]
        },
        {
          "name": "block_number",
          "description": "The block number\n* Provide the param 'block_numer' or ('from_block' and / or 'to_block')\n* If 'block_numer' is provided in combination with 'from_block' and / or 'to_block', 'block_number' will will be used\n",
          "required": false,
          "type": "string"
        },
        {
          "name": "from_block",
          "description": "The minimum block number from which to get the logs\n* Provide the param 'block_numer' or ('from_block' and / or 'to_block')\n* If 'block_numer' is provided in combination with 'from_block' and / or 'to_block', 'block_number' will will be used\n",
          "required": false,
          "type": "string"
        },
        {
          "name": "to_block",
          "description": "The maximum block number from which to get the logs\n* Provide the param 'block_numer' or ('from_block' and / or 'to_block')\n* If 'block_numer' is provided in combination with 'from_block' and / or 'to_block', 'block_number' will will be used\n",
          "required": false,
          "type": "string"
        },
        {
          "name": "from_date",
          "description": "The start date from which to get the logs (any format that is accepted by momentjs)\n* Provide the param 'from_block' or 'from_date'\n* If 'from_date' and 'from_block' are provided, 'from_block' will be used.\n* If 'from_date' and the block params are provided, the block params will be used. Please refer to the blocks params sections (block_number,from_block and to_block) on how to use them\n",
          "required": false,
          "type": "string"
        },
        {
          "name": "to_date",
          "description": "Get the logs up to this date (any format that is accepted by momentjs)\n* Provide the param 'to_block' or 'to_date'\n* If 'to_date' and 'to_block' are provided, 'to_block' will be used.\n* If 'to_date' and the block params are provided, the block params will be used. Please refer to the blocks params sections (block_number,from_block and to_block) on how to use them\n",
          "required": false,
          "type": "string"
        },
        {
          "name": "topic0",
          "description": "topic0",
          "required": false,
          "type": "string"
        },
        {
          "name": "topic1",
          "description": "topic1",
          "required": false,
          "type": "string"
        },
        {
          "name": "topic2",
          "description": "topic2",
          "required": false,
          "type": "string"
        },
        {
          "name": "topic3",
          "description": "topic3",
          "required": false,
          "type": "string"
        },
        {
          "name": "limit",
          "description": "The desired page size of the result.",
          "required": false,
          "type": "number"
        },
        {
          "name": "cursor",
          "description": "The cursor returned in the previous response (used for getting the next page).",
          "type": "string"
        }
      ],
      "responses": [
        {
          "status": "200",
          "description": "Returns the logs for an address",
          "body": {
            "type": "object",
            "fields": [
              {
                "name": "total",
                "type": "number",
                "description": "The total number of matches for this query",
                "example": "100"
              },
              {
                "name": "page",
                "type": "number",
                "description": "The current page of the result",
                "example": "1"
              },
              {
                "name": "page_size",
                "type": "number",
                "description": "The number of results per page",
                "example": "100"
              },
              {
                "name": "cursor",
                "type": "string",
                "description": "The cursor to get to the next page"
              },
              {
                "name": "result",
                "type": "object",
                "fields": [
                  {
                    "name": "transaction_hash",
                    "type": "string",
                    "description": "The transaction hash",
                    "example": "0x2d30ca6f024dbc1307ac8a1a44ca27de6f797ec22ef20627a1307243b0ab7d09"
                  },
                  {
                    "name": "address",
                    "type": "string",
                    "description": "The address of the contract",
                    "example": "0x057Ec652A4F150f7FF94f089A38008f49a0DF88e"
                  },
                  {
                    "name": "block_timestamp",
                    "type": "string",
                    "description": "The block timestamp",
                    "example": "2021-04-02T10:07:54.000Z"
                  },
                  {
                    "name": "block_number",
                    "type": "string",
                    "description": "The block number",
                    "example": 12526958
                  },
                  {
                    "name": "block_hash",
                    "type": "string",
                    "description": "The block hash",
                    "example": "0x0372c302e3c52e8f2e15d155e2c545e6d802e479236564af052759253b20fd86"
                  },
                  {
                    "name": "data",
                    "type": "string",
                    "description": "The data of the log",
                    "example": "0x00000000000000000000000000000000000000000000000de05239bccd4d537400000000000000000000000000024dbc80a9f80e3d5fc0a0ee30e2693781a443"
                  },
                  {
                    "name": "topic0",
                    "type": "string",
                    "example": "0x2caecd17d02f56fa897705dcc740da2d237c373f70686f4e0d9bd3bf0400ea7a"
                  },
                  {
                    "name": "topic1",
                    "type": "string",
                    "example": "0x000000000000000000000000031002d15b0d0cd7c9129d6f644446368deae391"
                  },
                  {
                    "name": "topic2",
                    "type": "string",
                    "example": "0x000000000000000000000000d25943be09f968ba740e0782a34e710100defae9"
                  },
                  { "name": "topic3", "type": "string", "example": null },
                  {
                    "name": "transaction_index",
                    "type": "number",
                    "description": "The Transaction index of the log within the block",
                    "example": 12
                  },
                  {
                    "name": "log_index",
                    "type": "number",
                    "description": "The log index of the log within the block",
                    "example": 15
                  }
                ]
              }
            ]
          }
        }
      ]
    },
    "getContractEvents": {
      "summary": "Get events by contract",
      "description": "Get events for a contract ordered by block number in descending order. [Try it with Swagger](https://deep-index.moralis.io/api-docs-2.1/#/Events/getContractEvents).",
      "method": "POST",
      "path": "/:address/events",
      "pathParams": [
        {
          "name": "address",
          "description": "The address of the contract",
          "required": true,
          "type": "string"
        }
      ],
      "queryParams": [
        {
          "name": "chain",
          "description": "The chain to query",
          "required": false,
          "example": "eth",
          "type": "string",
          "enum": [
            "eth",
            "0x1",
            "goerli",
            "0x5",
            "sepolia",
            "0xaa36a7",
            "polygon",
            "0x89",
            "mumbai",
            "0x13881",
            "bsc",
            "0x38",
            "bsc testnet",
            "0x61",
            "avalanche",
            "0xa86a",
            "avalanche testnet",
            "0xa869",
            "fantom",
            "0xfa",
            "palm",
            "0x2a15c308d",
            "cronos",
            "0x19",
            "cronos testnet",
            "0x152",
            "arbitrum",
            "0xa4b1"
          ]
        },
        {
          "name": "from_block",
          "description": "The minimum block number from which to get the logs\n* Provide the param 'from_block' or 'from_date'\n* If 'from_date' and 'from_block' are provided, 'from_block' will be used.\n",
          "required": false,
          "type": "number"
        },
        {
          "name": "to_block",
          "description": "The maximum block number from which to get the logs.\n* Provide the param 'to_block' or 'to_date'\n* If 'to_date' and 'to_block' are provided, 'to_block' will be used.\n",
          "required": false,
          "type": "number"
        },
        {
          "name": "from_date",
          "description": "The start date from which to get the logs (any format that is accepted by momentjs)\n* Provide the param 'from_block' or 'from_date'\n* If 'from_date' and 'from_block' are provided, 'from_block' will be used.\n",
          "required": false,
          "type": "string"
        },
        {
          "name": "to_date",
          "description": "Get the logs up to this date (any format that is accepted by momentjs)\n* Provide the param 'to_block' or 'to_date'\n* If 'to_date' and 'to_block' are provided, 'to_block' will be used.\n",
          "type": "string"
        },
        {
          "name": "topic",
          "description": "The topic of the event",
          "required": true,
          "type": "string"
        },
        {
          "name": "offset",
          "description": "offset",
          "required": false,
          "type": "number"
        },
        {
          "name": "limit",
          "description": "The desired page size of the result.",
          "required": false,
          "type": "number"
        }
      ],
      "responses": [
        {
          "status": "200",
          "description": "Returns a collection of events by topic"
        }
      ]
    }
  },
  "block": {
    "getBlock": {
      "summary": "Get block by hash",
      "description": "Get the contents of a block given the block hash.",
      "method": "GET",
      "path": "/block/:block_number_or_hash",
      "pathParams": [
        {
          "name": "block_number_or_hash",
          "description": "The block number or block hash",
          "required": true,
          "example": "15863321",
          "type": "string"
        }
      ],
      "queryParams": [
        {
          "name": "chain",
          "description": "The chain to query",
          "required": false,
          "example": "eth",
          "type": "string",
          "enum": [
            "eth",
            "0x1",
            "goerli",
            "0x5",
            "sepolia",
            "0xaa36a7",
            "polygon",
            "0x89",
            "mumbai",
            "0x13881",
            "bsc",
            "0x38",
            "bsc testnet",
            "0x61",
            "avalanche",
            "0xa86a",
            "avalanche testnet",
            "0xa869",
            "fantom",
            "0xfa",
            "palm",
            "0x2a15c308d",
            "cronos",
            "0x19",
            "cronos testnet",
            "0x152",
            "arbitrum",
            "0xa4b1"
          ]
        }
      ],
      "responses": [
        {
          "status": "200",
          "description": "Returns the contents of a block",
          "body": {
            "type": "object",
            "fields": [
              {
                "name": "timestamp",
                "type": "string",
                "description": "The block timestamp",
                "example": "2021-05-07T11:08:35.000Z"
              },
              {
                "name": "number",
                "type": "string",
                "description": "The block number",
                "example": 12386788
              },
              {
                "name": "hash",
                "type": "string",
                "description": "The block hash",
                "example": "0x9b559aef7ea858608c2e554246fe4a24287e7aeeb976848df2b9a2531f4b9171"
              },
              {
                "name": "parent_hash",
                "type": "string",
                "description": "The block hash of the parent block",
                "example": "0x011d1fc45839de975cc55d758943f9f1d204f80a90eb631f3bf064b80d53e045"
              },
              {
                "name": "nonce",
                "type": "string",
                "description": "The nonce",
                "example": "0xedeb2d8fd2b2bdec"
              },
              {
                "name": "sha3_uncles",
                "type": "string",
                "example": "0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347"
              },
              {
                "name": "logs_bloom",
                "type": "string",
                "example": "0xdde5fc46c5d8bcbd58207bc9f267bf43298e23791a326ff02661e99790da9996b3e0dd912c0b8202d389d282c56e4d11eb2dec4898a32b6b165f1f4cae6aa0079498eab50293f3b8defbf6af11bb75f0408a563ddfc26a3323d1ff5f9849e95d5f034d88a757ddea032c75c00708c9ff34d2207f997cc7d93fd1fa160a6bfaf62a54e31f9fe67ab95752106ba9d185bfdc9b6dc3e17427f844ee74e5c09b17b83ad6e8fc7360f5c7c3e4e1939e77a6374bee57d1fa6b2322b11ad56ad0398302de9b26d6fbfe414aa416bff141fad9d4af6aea19322e47595e342cd377403f417dfd396ab5f151095a5535f51cbc34a40ce9648927b7d1d72ab9daf253e31daf"
              },
              {
                "name": "transactions_root",
                "type": "string",
                "example": "0xe4c7bf3aff7ad07f9e80d57f7189f0252592fee6321c2a9bd9b09b6ce0690d27"
              },
              {
                "name": "state_root",
                "type": "string",
                "example": "0x49e3bfe7b618e27fde8fa08884803a8458b502c6534af69873a3cc926a7c724b"
              },
              {
                "name": "receipts_root",
                "type": "string",
                "example": "0x7cf43d7e837284f036cf92c56973f5e27bdd253ca46168fa195a6b07fa719f23"
              },
              {
                "name": "miner",
                "type": "string",
                "description": "The address of the miner",
                "example": "0xea674fdde714fd979de3edf0f56aa9716b898ec8"
              },
              {
                "name": "difficulty",
                "type": "string",
                "description": "The difficulty of the block",
                "example": "7253857437305950"
              },
              {
                "name": "total_difficulty",
                "type": "string",
                "description": "The total difficulty",
                "example": "24325637817906576196890"
              },
              {
                "name": "size",
                "type": "string",
                "description": "The block size",
                "example": "61271"
              },
              {
                "name": "extra_data",
                "type": "string",
                "example": "0x65746865726d696e652d6575726f70652d7765737433"
              },
              {
                "name": "gas_limit",
                "type": "string",
                "description": "The gas limit",
                "example": "14977947"
              },
              {
                "name": "gas_used",
                "type": "string",
                "description": "The gas used",
                "example": "14964688"
              },
              {
                "name": "transaction_count",
                "type": "string",
                "description": "The number of transactions in the block",
                "example": "252"
              },
              {
                "name": "transactions",
                "type": "object",
                "description": "The transactions in the block",
                "fields": [
                  {
                    "name": "hash",
                    "type": "string",
                    "description": "The hash of the transaction",
                    "example": "0x1ed85b3757a6d31d01a4d6677fc52fd3911d649a0af21fe5ca3f886b153773ed"
                  },
                  {
                    "name": "nonce",
                    "type": "string",
                    "description": "The nonce",
                    "example": "1848059"
                  },
                  {
                    "name": "transaction_index",
                    "type": "string",
                    "example": "108"
                  },
                  {
                    "name": "from_address",
                    "type": "string",
                    "description": "The from address",
                    "example": "0x267be1c1d684f78cb4f6a176c4911b741e4ffdc0"
                  },
                  {
                    "name": "to_address",
                    "type": "string",
                    "description": "The to address",
                    "example": "0x003dde3494f30d861d063232c6a8c04394b686ff"
                  },
                  {
                    "name": "value",
                    "type": "string",
                    "description": "The value sent",
                    "example": "115580000000000000"
                  },
                  { "name": "gas", "type": "string", "example": "30000" },
                  {
                    "name": "gas_price",
                    "type": "string",
                    "description": "The gas price",
                    "example": "52500000000"
                  },
                  { "name": "input", "type": "string", "example": "0x" },
                  {
                    "name": "receipt_cumulative_gas_used",
                    "type": "string",
                    "example": "4923073"
                  },
                  {
                    "name": "receipt_gas_used",
                    "type": "string",
                    "example": "21000"
                  },
                  {
                    "name": "receipt_contract_address",
                    "type": "string",
                    "example": null
                  },
                  { "name": "receipt_root", "type": "string", "example": null },
                  {
                    "name": "receipt_status",
                    "type": "string",
                    "example": "1"
                  },
                  {
                    "name": "block_timestamp",
                    "type": "string",
                    "description": "The block timestamp",
                    "example": "2021-05-07T11:08:35.000Z"
                  },
                  {
                    "name": "block_number",
                    "type": "string",
                    "description": "The block number",
                    "example": "12386788"
                  },
                  {
                    "name": "block_hash",
                    "type": "string",
                    "description": "The hash of the block",
                    "example": "0x9b559aef7ea858608c2e554246fe4a24287e7aeeb976848df2b9a2531f4b9171"
                  },
                  {
                    "name": "logs",
                    "type": "object",
                    "description": "The logs of the transaction",
                    "fields": [
                      {
                        "name": "log_index",
                        "type": "string",
                        "example": "273"
                      },
                      {
                        "name": "transaction_hash",
                        "type": "string",
                        "description": "The hash of the transaction",
                        "example": "0xdd9006489e46670e0e85d1fb88823099e7f596b08aeaac023e9da0851f26fdd5"
                      },
                      {
                        "name": "transaction_index",
                        "type": "string",
                        "example": "204"
                      },
                      {
                        "name": "address",
                        "type": "string",
                        "description": "The address of the contract",
                        "example": "0x3105d328c66d8d55092358cf595d54608178e9b5"
                      },
                      {
                        "name": "data",
                        "type": "string",
                        "description": "The data of the log",
                        "example": "0x00000000000000000000000000000000000000000000000de05239bccd4d537400000000000000000000000000024dbc80a9f80e3d5fc0a0ee30e2693781a443"
                      },
                      {
                        "name": "topic0",
                        "type": "string",
                        "example": "0x2caecd17d02f56fa897705dcc740da2d237c373f70686f4e0d9bd3bf0400ea7a"
                      },
                      {
                        "name": "topic1",
                        "type": "string",
                        "example": "0x000000000000000000000000031002d15b0d0cd7c9129d6f644446368deae391"
                      },
                      {
                        "name": "topic2",
                        "type": "string",
                        "example": "0x000000000000000000000000d25943be09f968ba740e0782a34e710100defae9"
                      },
                      { "name": "topic3", "type": "string", "example": null },
                      {
                        "name": "block_timestamp",
                        "type": "string",
                        "description": "The timestamp of the block",
                        "example": "2021-05-07T11:08:35.000Z"
                      },
                      {
                        "name": "block_number",
                        "type": "string",
                        "description": "The block number",
                        "example": "12386788"
                      },
                      {
                        "name": "block_hash",
                        "type": "string",
                        "description": "The hash of the block",
                        "example": "0x9b559aef7ea858608c2e554246fe4a24287e7aeeb976848df2b9a2531f4b9171"
                      }
                    ]
                  }
                ]
              }
            ]
          }
        }
      ]
    },
    "getDateToBlock": {
      "summary": "Get block by date",
      "description": "Get the closest block given the date.",
      "method": "GET",
      "path": "/dateToBlock",
      "pathParams": [],
      "queryParams": [
        {
          "name": "chain",
          "description": "The chain to query",
          "required": false,
          "example": "eth",
          "type": "string",
          "enum": [
            "eth",
            "0x1",
            "goerli",
            "0x5",
            "sepolia",
            "0xaa36a7",
            "polygon",
            "0x89",
            "mumbai",
            "0x13881",
            "bsc",
            "0x38",
            "bsc testnet",
            "0x61",
            "avalanche",
            "0xa86a",
            "avalanche testnet",
            "0xa869",
            "fantom",
            "0xfa",
            "palm",
            "0x2a15c308d",
            "cronos",
            "0x19",
            "cronos testnet",
            "0x152",
            "arbitrum",
            "0xa4b1"
          ]
        },
        {
          "name": "date",
          "description": "Unix date in milliseconds or a datestring (any format that is accepted by momentjs)",
          "required": true,
          "type": "string"
        }
      ],
      "responses": [
        {
          "status": "200",
          "description": "Returns the block number and corresponding date and timestamp",
          "body": {
            "type": "object",
            "fields": [
              {
                "name": "date",
                "type": "string",
                "description": "The date of the block",
                "example": "2020-01-01T00:00:00+00:00"
              },
              {
                "name": "block",
                "type": "number",
                "description": "The block number",
                "example": 9193266
              },
              {
                "name": "timestamp",
                "type": "number",
                "description": "The timestamp of the block",
                "example": 1577836811
              },
              {
                "name": "block_timestamp",
                "type": "number",
                "description": "The timestamp of the block",
                "example": "2022-01-03T22:59:39.000Z"
              },
              {
                "name": "block_hash",
                "type": "string",
                "description": "The block hash",
                "example": "0x9b559aef7ea858608c2e554246fe4a24287e7aeeb976848df2b9a2531f4b9171"
              },
              {
                "name": "parent_hash",
                "type": "string",
                "description": "The block hash of the parent block",
                "example": "0x011d1fc45839de975cc55d758943f9f1d204f80a90eb631f3bf064b80d53e045"
              }
            ]
          }
        }
      ]
    }
  },
  "utils": {
    "runContractFunction": {
      "summary": "Run contract function",
      "description": "Run a given function of a contract ABI and retrieve readonly data. [Try it with Swagger](https://deep-index.moralis.io/api-docs-2.1/#/Utils/runContractFunction).",
      "method": "POST",
      "path": "/:address/function",
      "pathParams": [
        {
          "name": "address",
          "description": "The address of the contract",
          "required": true,
          "type": "string"
        }
      ],
      "queryParams": [
        {
          "name": "chain",
          "description": "The chain to query",
          "required": false,
          "example": "eth",
          "type": "string",
          "enum": [
            "eth",
            "0x1",
            "goerli",
            "0x5",
            "sepolia",
            "0xaa36a7",
            "polygon",
            "0x89",
            "mumbai",
            "0x13881",
            "bsc",
            "0x38",
            "bsc testnet",
            "0x61",
            "avalanche",
            "0xa86a",
            "avalanche testnet",
            "0xa869",
            "fantom",
            "0xfa",
            "palm",
            "0x2a15c308d",
            "cronos",
            "0x19",
            "cronos testnet",
            "0x152",
            "arbitrum",
            "0xa4b1"
          ]
        },
        {
          "name": "function_name",
          "description": "The function name of the contract",
          "required": true,
          "type": "string"
        }
      ],
      "responses": [
        {
          "status": "200",
          "description": "Returns response of the function executed"
        }
      ]
    },
    "web3ApiVersion": {
      "summary": "Get API version",
      "description": "Get the current version of the Moralis Web3 API.",
      "method": "GET",
      "path": "/web3/version",
      "pathParams": [],
      "queryParams": [],
      "responses": [
        {
          "status": "200",
          "description": "Get the current version of the Moralis Web3 API.",
          "body": {
            "type": "object",
            "fields": [
              {
                "name": "version",
                "type": "string",
                "description": "The version of the API",
                "example": "1.0.0"
              }
            ]
          }
        }
      ]
    },
    "endpointWeights": {
      "summary": "Get weights of endpoints",
      "description": "Get the cost and rate limit for each API endpoint.",
      "method": "GET",
      "path": "/info/endpointWeights",
      "pathParams": [],
      "queryParams": [],
      "responses": [
        {
          "status": "200",
          "description": "The cost and rate limit for each API endpoint."
        }
      ]
    }
  },
  "resolve": {
    "resolveAddress": {
      "summary": "Resolve ENS name",
      "description": "Resolve an ETH address and find the ENS name.",
      "method": "GET",
      "path": "/resolve/:address/reverse",
      "pathParams": [
        {
          "name": "address",
          "description": "The address to be resolved",
          "required": true,
          "example": "0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045",
          "type": "string"
        }
      ],
      "queryParams": [],
      "responses": [
        {
          "status": "200",
          "description": "Returns an ENS",
          "body": {
            "type": "object",
            "fields": [
              {
                "name": "name",
                "type": "string",
                "description": "Resolved ENS address",
                "example": "Vitalik.eth"
              }
            ]
          }
        }
      ]
    },
    "resolveDomain": {
      "summary": "Resolve Unstoppable domain",
      "description": "Resolve an Unstoppable domain and get the address.",
      "method": "GET",
      "path": "/resolve/:domain",
      "pathParams": [
        {
          "name": "domain",
          "description": "The domain to be resolved",
          "required": true,
          "example": "brad.crypto",
          "type": "string"
        }
      ],
      "queryParams": [
        {
          "name": "currency",
          "description": "The currency to query",
          "required": false,
          "example": "eth",
          "type": "string"
        }
      ],
      "responses": [
        {
          "status": "200",
          "description": "Returns an address",
          "body": {
            "type": "object",
            "fields": [
              {
                "name": "address",
                "type": "string",
                "description": "Resolved domain address",
                "example": "0x057Ec652A4F150f7FF94f089A38008f49a0DF88e"
              }
            ]
          }
        },
        { "status": "404", "description": "Returns an address" }
      ]
    }
  },
  "defi": {
    "getPairReserves": {
      "summary": "Get pair reserves",
      "description": "Get the liquidity reserves for a given pair address. Only Uniswap V2 based exchanges supported at the moment.",
      "method": "GET",
      "path": "/:pair_address/reserves",
      "pathParams": [
        {
          "name": "pair_address",
          "description": "The liquidity pair address",
          "required": true,
          "example": "0xa2107fa5b38d9bbd2c461d6edf11b11a50f6b974",
          "type": "string"
        }
      ],
      "queryParams": [
        {
          "name": "chain",
          "description": "The chain to query",
          "required": false,
          "example": "eth",
          "type": "string",
          "enum": [
            "eth",
            "0x1",
            "goerli",
            "0x5",
            "sepolia",
            "0xaa36a7",
            "polygon",
            "0x89",
            "mumbai",
            "0x13881",
            "bsc",
            "0x38",
            "bsc testnet",
            "0x61",
            "avalanche",
            "0xa86a",
            "avalanche testnet",
            "0xa869",
            "fantom",
            "0xfa",
            "palm",
            "0x2a15c308d",
            "cronos",
            "0x19",
            "cronos testnet",
            "0x152",
            "arbitrum",
            "0xa4b1"
          ]
        },
        {
          "name": "to_block",
          "description": "The block number to get the reserves from",
          "required": false,
          "type": "string"
        },
        {
          "name": "to_date",
          "description": "Get the reserves up to this date (any format that is accepted by momentjs)\n* Provide the param 'to_block' or 'to_date'\n* If 'to_date' and 'to_block' are provided, 'to_block' will be used.\n",
          "type": "string"
        }
      ],
      "responses": [
        { "status": "200", "description": "Returns the pair reserves" }
      ]
    },
    "getPairAddress": {
      "summary": "Get pair address",
      "description": "Fetch the pair data of the provided token0+token1 combination.\nThe token0 and token1 options are interchangable (ie. there is no different outcome in \"token0=WETH and token1=USDT\" or \"token0=USDT and token1=WETH\")\n",
      "method": "GET",
      "path": "/:token0_address/:token1_address/pairAddress",
      "pathParams": [
        {
          "name": "token0_address",
          "description": "The token0 address",
          "required": true,
          "example": "0x2b591e99afe9f32eaa6214f7b7629768c40eeb39",
          "type": "string"
        },
        {
          "name": "token1_address",
          "description": "The token1 address",
          "required": true,
          "example": "0xdac17f958d2ee523a2206206994597c13d831ec7",
          "type": "string"
        }
      ],
      "queryParams": [
        {
          "name": "chain",
          "description": "The chain to query",
          "required": false,
          "example": "eth",
          "type": "string",
          "enum": [
            "eth",
            "0x1",
            "goerli",
            "0x5",
            "sepolia",
            "0xaa36a7",
            "polygon",
            "0x89",
            "mumbai",
            "0x13881",
            "bsc",
            "0x38",
            "bsc testnet",
            "0x61",
            "avalanche",
            "0xa86a",
            "avalanche testnet",
            "0xa869",
            "fantom",
            "0xfa",
            "palm",
            "0x2a15c308d",
            "cronos",
            "0x19",
            "cronos testnet",
            "0x152",
            "arbitrum",
            "0xa4b1"
          ]
        },
        {
          "name": "to_block",
          "description": "The block number to get the reserves from",
          "required": false,
          "type": "string"
        },
        {
          "name": "to_date",
          "description": "Get the reserves up to this date (any format that is accepted by momentjs)\n* Provide the param 'to_block' or 'to_date'\n* If 'to_date' and 'to_block' are provided, 'to_block' will be used.\n",
          "type": "string"
        },
        {
          "name": "exchange",
          "description": "The factory name or address of the token exchange",
          "required": true,
          "example": "uniswapv2",
          "type": "string"
        }
      ],
      "responses": [
        {
          "status": "200",
          "description": "Returns the pair address of the two tokens.",
          "body": { "type": "object" }
        }
      ]
    }
  },
  "ipfs": {
    "uploadFolder": {
      "summary": "Upload folder",
      "description": "Upload multiple files to IPFS and place them in a folder directory.",
      "method": "POST",
      "path": "/ipfs/uploadFolder",
      "pathParams": [],
      "queryParams": [],
      "responses": [
        {
          "status": "200",
          "description": "Returns the path to the uploaded files"
        }
      ]
    }
  },
  "auth": {
    "requestChallengeEvm": {
      "summary": "Request EVM challenge",
      "method": "POST",
      "path": "/challenge/request/evm",
      "pathParams": [],
      "queryParams": [],
      "responses": [
        {
          "status": "201",
          "description": "The back channel challenge containing the id to store on the api and the message to be signed by the user",
          "body": { "type": "object" }
        }
      ]
    },
    "verifyChallengeEvm": {
      "summary": "Verify EVM challenge",
      "method": "POST",
      "path": "/challenge/verify/evm",
      "pathParams": [],
      "queryParams": [],
      "responses": [
        {
          "status": "201",
          "description": "The token to be used to call the third party API from the client",
          "body": { "type": "object" }
        }
      ]
    },
    "requestChallengeSolana": {
      "summary": "Request Solana challenge",
      "method": "POST",
      "path": "/challenge/request/solana",
      "pathParams": [],
      "queryParams": [],
      "responses": [
        {
          "status": "201",
          "description": "The back channel challenge containing the id to store on the api and the message to be signed by the user",
          "body": { "type": "object" }
        }
      ]
    },
    "verifyChallengeSolana": {
      "summary": "Verify Solana challenge",
      "method": "POST",
      "path": "/challenge/verify/solana",
      "pathParams": [],
      "queryParams": [],
      "responses": [
        {
          "status": "201",
          "description": "The token to be used to call the third party API from the client",
          "body": { "type": "object" }
        }
      ]
    }
  },
  "streams": {
    "GetHistory": {
      "summary": "Get history",
      "description": "Get all history",
      "method": "GET",
      "path": "/history",
      "pathParams": [],
      "queryParams": [
        { "name": "limit", "required": true, "type": "number" },
        { "name": "cursor", "required": false, "type": "string" },
        { "name": "excludePayload", "required": false, "type": "boolean" }
      ],
      "responses": [
        { "status": "200", "description": "Ok", "body": { "type": "object" } }
      ]
    },
    "ReplayHistory": {
      "summary": "Replay history",
      "description": "Replay a specific history.",
      "method": "POST",
      "path": "/history/replay/:streamId/:id",
      "pathParams": [
        {
          "name": "streamId",
          "description": "The id of the stream the history will be replayed",
          "required": true,
          "type": "string"
        },
        {
          "name": "id",
          "description": "The id of the history to replay",
          "required": true,
          "type": "string"
        }
      ],
      "queryParams": [],
      "responses": [
        { "status": "200", "description": "Ok", "body": { "type": "object" } }
      ]
    },
    "SetSettings": {
      "summary": "Set project settings",
      "description": "Set the settings for the current project based on the project api-key.",
      "method": "POST",
      "path": "/settings",
      "pathParams": [],
      "queryParams": [],
      "responses": [
        { "status": "200", "description": "Ok", "body": { "type": "object" } }
      ]
    },
    "GetStats": {
      "summary": "Get project stats",
      "description": "Get the global stats for the account.",
      "method": "GET",
      "path": "/stats",
      "pathParams": [],
      "queryParams": [],
      "responses": [
        { "status": "200", "description": "Ok", "body": { "type": "object" } }
      ]
    },
    "GetStatsByStreamId": {
      "summary": "Get project stats by Stream ID",
      "description": "Get the stats for the streamId specified",
      "method": "GET",
      "path": "/stats/:streamId",
      "pathParams": [
        {
          "name": "streamId",
          "description": "The id of the stream to get the stats",
          "required": true,
          "type": "string"
        }
      ],
      "queryParams": [],
      "responses": [
        { "status": "200", "description": "Ok", "body": { "type": "object" } }
      ]
    },
    "GetStreams": {
      "summary": "Get streams",
      "description": "Get all the evm streams for the current project based on the project api-key.",
      "method": "GET",
      "path": "/streams/evm",
      "pathParams": [],
      "queryParams": [
        {
          "name": "limit",
          "description": "Limit response results max value 100",
          "required": true,
          "type": "number"
        },
        {
          "name": "cursor",
          "description": "Cursor for fetching next page",
          "required": false,
          "type": "string"
        }
      ],
      "responses": [
        { "status": "200", "description": "Ok", "body": { "type": "object" } }
      ]
    },
    "GetStream": {
      "summary": "Get a specific evm stream.",
      "description": "Get a specific evm stream.",
      "method": "GET",
      "path": "/streams/evm/:id",
      "pathParams": [
        {
          "name": "id",
          "description": "The id of the stream to get",
          "required": true,
          "type": "string"
        }
      ],
      "queryParams": [],
      "responses": [
        { "status": "200", "description": "Ok", "body": { "type": "object" } }
      ]
    },
    "UpdateStreamStatus": {
      "summary": "Update stream status",
      "description": "Updates the status of specific evm stream.",
      "method": "POST",
      "path": "/streams/evm/:id/status",
      "pathParams": [
        {
          "name": "id",
          "description": "The id of the stream to update",
          "required": true,
          "type": "string"
        }
      ],
      "queryParams": [],
      "responses": [
        { "status": "200", "description": "Ok", "body": { "type": "object" } }
      ]
    },
    "GetAddresses": {
      "summary": "Get addresses by stream",
      "description": "Get all addresses associated with a specific stream.",
      "method": "GET",
      "path": "/streams/evm/:id/address",
      "pathParams": [
        {
          "name": "id",
          "description": "the id of the stream to get the addresses from",
          "required": true,
          "type": "string"
        }
      ],
      "queryParams": [
        {
          "name": "limit",
          "description": "Limit response results max value 100",
          "required": true,
          "type": "number"
        },
        {
          "name": "cursor",
          "description": "Cursor for fetching next page",
          "required": false,
          "type": "string"
        }
      ],
      "responses": [
        { "status": "200", "description": "Ok", "body": { "type": "object" } }
      ]
    }
  },
  "solana": {
    "balance": {
      "summary": "Get native balance by wallet",
      "description": "Gets the native balance owned by a given network and address.",
      "method": "GET",
      "path": "/account/:network/:address/balance",
      "pathParams": [
        { "name": "network", "required": true, "type": "string" },
        { "name": "address", "required": true, "type": "string" }
      ],
      "queryParams": [],
      "responses": [
        { "status": "200", "description": "", "body": { "type": "object" } },
        { "status": "400", "description": "" }
      ]
    },
    "getSPL": {
      "summary": "Get token balance by wallet",
      "description": "Gets the token balances owned by a given network and address.",
      "method": "GET",
      "path": "/account/:network/:address/tokens",
      "pathParams": [
        { "name": "network", "required": true, "type": "string" },
        { "name": "address", "required": true, "type": "string" }
      ],
      "queryParams": [],
      "responses": [
        { "status": "200", "description": "" },
        { "status": "400", "description": "" }
      ]
    },
    "getNFTs": {
      "summary": "Get NFTs by wallet",
      "description": "Gets NFTs owned by a given network and address.",
      "method": "GET",
      "path": "/account/:network/:address/nft",
      "pathParams": [
        { "name": "network", "required": true, "type": "string" },
        { "name": "address", "required": true, "type": "string" }
      ],
      "queryParams": [],
      "responses": [
        { "status": "200", "description": "" },
        { "status": "400", "description": "" }
      ]
    },
    "getPortfolio": {
      "summary": "Gets portfolio by wallet",
      "description": "Gets the portfolio for a given network and address.",
      "method": "GET",
      "path": "/account/:network/:address/portfolio",
      "pathParams": [
        { "name": "address", "required": true, "type": "string" },
        { "name": "network", "required": true, "type": "string" }
      ],
      "queryParams": [],
      "responses": [
        { "status": "200", "description": "", "body": { "type": "object" } },
        { "status": "400", "description": "" }
      ]
    },
    "getNFTMetadata": {
      "summary": "Get NFT metadata",
      "description": "Get the global NFT metadata for a given network and contract (mint, standard, name, symbol, metaplex).",
      "method": "GET",
      "path": "/nft/:network/:address/metadata",
      "pathParams": [
        { "name": "address", "required": true, "type": "string" },
        { "name": "network", "required": true, "type": "string" }
      ],
      "queryParams": [],
      "responses": [
        { "status": "200", "description": "", "body": { "type": "object" } },
        { "status": "400", "description": "" }
      ]
    },
    "getTokenPrice": {
      "summary": "Get token price",
      "description": "Gets the token price (usd and native) for a given contract address and network.",
      "method": "GET",
      "path": "/token/:network/:address/price",
      "pathParams": [
        { "name": "address", "required": true, "type": "string" },
        { "name": "network", "required": true, "type": "string" }
      ],
      "queryParams": [],
      "responses": [
        { "status": "200", "description": "", "body": { "type": "object" } },
        { "status": "400", "description": "" }
      ]
    }
  }
}
